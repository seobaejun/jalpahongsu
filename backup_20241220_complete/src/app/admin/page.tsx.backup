'use client'

import { useState, useEffect, useCallback } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/hooks/useAuth'
import { useAdminAuth } from '@/hooks/useAdminAuth'
import { useLanguage } from '@/contexts/LanguageContext'
import { seedExperiences, resetExperiences } from '@/lib/seedData'
import { getAllUsers, getUserStats, User } from '@/lib/userService'
import { getRecentExperiences, getTodayExperiences, getExperienceStats } from '@/lib/experienceService'
import { getInstagramExperienceStats } from '@/lib/instagramExperienceService'
import { Experience } from '@/types/database'
import { updateUserRole, deleteUser, UserRole } from '@/lib/userRoleService'
import { getAllApplications, getApplicationStats, updateApplicationStatus, deleteApplication, cancelApproval, cancelRejection, Application, migrateApplicationsToCollection } from '@/lib/applicationService'
import Image from 'next/image'
import { 
  Users, 
  Activity, 
  BarChart3, 
  RefreshCw,
  UserCheck,
  Calendar,
  TrendingUp,
  Shield,
  FileText,
  Clock,
  CheckCircle,
  XCircle,
  Plus,
  Download,
  List
} from 'lucide-react'

export default function AdminPage() {
  const { user, isAuthenticated, loading } = useAuth()
  const { isAdmin, adminLoading, userRole } = useAdminAuth()
  const router = useRouter()
  const { t } = useLanguage()
  const [users, setUsers] = useState<(User & { id: string })[]>([])
  const [userStats, setUserStats] = useState({ totalUsers: 0, todayUsers: 0, thisWeekUsers: 0 })
  const [usersLoading, setUsersLoading] = useState(false)
  const [activeTab, setActiveTab] = useState('dashboard')
  const [activeSubTab, setActiveSubTab] = useState('')
  
  // Ïπ¥Îìú ?ùÏÑ± Í¥Ä???ÅÌÉú
  const [cardForm, setCardForm] = useState({
    activityType: '',
    title: '',
    titleZh: '',
    category: '',
    customCategory: '',
    description: '',
    descriptionZh: '',
    maxParticipants: '',
    experienceDate: '',
    experienceTimePeriod: '',
    experienceTimeHour: '',
    experienceTimeMinute: '',
    recruitmentStartDate: '',
    recruitmentEndDate: '',
    location: '',
    locationZh: '',
    benefits: [''],
    benefitsZh: [''],
    requirements: [''],
    requirementsZh: [''],
    image: null as File | null,
    imagePreview: '',
    images: [] as File[],
    imagePreviews: [] as string[]
  })
  const [showCustomCategory, setShowCustomCategory] = useState(false)
  const [cardSubmitting, setCardSubmitting] = useState(false)
  const [cardMessage, setCardMessage] = useState('')
  const [editingCardId, setEditingCardId] = useState<string | null>(null)
  
  const [recentExperiences, setRecentExperiences] = useState<Experience[]>([])
  const [todayExperiences, setTodayExperiences] = useState<Experience[]>([])
  const [experienceStats, setExperienceStats] = useState({ total: 0, recruiting: 0, ongoing: 0, completed: 0 })
  const [instagramStats, setInstagramStats] = useState({ total: 0, recruiting: 0, ongoing: 0, completed: 0 })
  // const [editingUser, setEditingUser] = useState<string | null>(null) // ?¨Ïö©?òÏ? ?äÏùå
  const [userMessage, setUserMessage] = useState('')
  const [applications, setApplications] = useState<Application[]>([])
  const [applicationStats, setApplicationStats] = useState({ 
    total: 0, 
    pending: 0, 
    approved: 0, 
    rejected: 0,
    todayApplications: 0,
    thisWeekApplications: 0,
    thisMonthApplications: 0
  })
  const [applicationsLoading, setApplicationsLoading] = useState(false)
  const [applicationMessage, setApplicationMessage] = useState('')
  const [allExperiences, setAllExperiences] = useState<Experience[]>([])
  const [experiencesLoading, setExperiencesLoading] = useState(false)
  
  // ?ëÏ? ?§Ïö¥Î°úÎìú Í¥Ä???ÅÌÉú
  const [excelData, setExcelData] = useState<{[key: string]: string | number | undefined}[]>([])
  const [excelLoading, setExcelLoading] = useState(false)
  const [excelMessage, setExcelMessage] = useState('')
  const [experienceMessage, setExperienceMessage] = useState('')
  const [experienceApplicationCounts, setExperienceApplicationCounts] = useState<{[key: string]: number}>({})

  // ?†Ïßú???∞Î•∏ ?ÅÌÉú ?êÎèô Í≥ÑÏÇ∞ ?®Ïàò
  const getStatusByDate = (experience: Experience) => {
    if (!experience.recruitmentStartDate || !experience.recruitmentEndDate) {
      return 'recruiting' // Í∏∞Î≥∏Í∞íÏúºÎ°?Î™®ÏßëÏ§?Î∞òÌôò
    }
    
    const today = new Date()
    const startDate = new Date(experience.recruitmentStartDate)
    const endDate = new Date(experience.recruitmentEndDate)
    
    // Î™®Ïßë ?úÏûë ??    if (today < startDate) {
      return 'recruiting'
    }
    // Î™®Ïßë Í∏∞Í∞Ñ Ï§?    else if (today >= startDate && today <= endDate) {
      return 'recruiting'
    }
    // Î™®Ïßë ÎßàÍ∞ê ??(Ï≤¥Ìóò ?ºÏ†ï ??
    else if (today > endDate) {
      // Ï≤¥Ìóò ?ºÏ†ï???àÎã§Î©?Ï≤¥Ìóò ?ºÏ†ï Í∏∞Ï??ºÎ°ú ?êÎã®
      if (experience.date) {
        const experienceDate = new Date(experience.date)
        if (today < experienceDate) {
          return 'ongoing' // Î™®Ïßë ÎßàÍ∞ê, Ï≤¥Ìóò ??        } else {
          return 'completed' // Ï≤¥Ìóò ?ÑÎ£å
        }
      }
      return 'ongoing' // Ï≤¥Ìóò ?ºÏ†ï???ÜÏúºÎ©?ÏßÑÌñâÏ§?    }
    
    return 'recruiting' // Í∏∞Î≥∏Í∞?  }

  useEffect(() => {
    if (!loading && !isAuthenticated) {
      router.push('/login')
      return
    }
    
    if (!adminLoading && isAuthenticated && !isAdmin) {
      router.push('/')
      return
    }
  }, [isAuthenticated, loading, adminLoading, isAdmin, router])

  const loadUsers = useCallback(async () => {
    setUsersLoading(true)
    try {
      const result = await getAllUsers()
      if (result.success) {
        setUsers(result.users || [])
      }
    } catch {
      console.error('?¨Ïö©??Î™©Î°ù Î°úÎî© ?§Î•ò')
    } finally {
      setUsersLoading(false)
    }
  }, [])

  const loadUserStats = useCallback(async () => {
    try {
      const result = await getUserStats()
      if (result.success) {
        setUserStats(result.stats || { totalUsers: 0, todayUsers: 0, thisWeekUsers: 0 })
      }
    } catch {
      console.error('?¨Ïö©???µÍ≥Ñ Î°úÎî© ?§Î•ò')
    }
  }, [])

  const loadExperienceData = useCallback(async () => {
    try {
      console.log('=== Ï≤¥Ìóò???∞Ïù¥??Î°úÎî© ?úÏûë ===')
      
      // ?§Ïò§?çÏäà Ï≤¥Ìóò???µÍ≥Ñ Î°úÎìú
      const statsResult = await getExperienceStats()
      if (statsResult.success) {
        setExperienceStats(statsResult.stats || { total: 0, recruiting: 0, ongoing: 0, completed: 0 })
        console.log('?§Ïò§?çÏäà Ï≤¥Ìóò???µÍ≥Ñ Î°úÎìú ?ÑÎ£å:', statsResult.stats)
      } else {
        console.error('?§Ïò§?çÏäà Ï≤¥Ìóò???µÍ≥Ñ Î°úÎìú ?§Ìå®:', statsResult.error)
        // Í∏∞Î≥∏Í∞??§Ï†ï
        setExperienceStats({ total: 0, recruiting: 0, ongoing: 0, completed: 0 })
      }

      // ?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò???µÍ≥Ñ Î°úÎìú
      const instagramStatsResult = await getInstagramExperienceStats()
      if (instagramStatsResult.success) {
        setInstagramStats(instagramStatsResult.stats || { total: 0, recruiting: 0, ongoing: 0, completed: 0 })
        console.log('?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò???µÍ≥Ñ Î°úÎìú ?ÑÎ£å:', instagramStatsResult.stats)
      } else {
        console.error('?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò???µÍ≥Ñ Î°úÎìú ?§Ìå®:', instagramStatsResult.error)
        // Í∏∞Î≥∏Í∞??§Ï†ï
        setInstagramStats({ total: 0, recruiting: 0, ongoing: 0, completed: 0 })
      }

      // ÏµúÍ∑º Ï≤¥Ìóò??Î°úÎìú
      const recentResult = await getRecentExperiences(5)
      if (recentResult.success) {
        setRecentExperiences(recentResult.experiences || [])
        console.log('ÏµúÍ∑º Ï≤¥Ìóò??Î°úÎìú ?ÑÎ£å:', recentResult.experiences?.length)
      } else {
        console.error('ÏµúÍ∑º Ï≤¥Ìóò??Î°úÎìú ?§Ìå®:', recentResult.error)
      }

      // ?§Îäò Î∞©Î¨∏ Ï≤¥Ìóò??Î°úÎìú
      const todayResult = await getTodayExperiences()
      if (todayResult.success) {
        setTodayExperiences(todayResult.experiences || [])
        console.log('?§Îäò Î∞©Î¨∏ Ï≤¥Ìóò??Î°úÎìú ?ÑÎ£å:', todayResult.experiences?.length)
      } else {
        console.error('?§Îäò Î∞©Î¨∏ Ï≤¥Ìóò??Î°úÎìú ?§Ìå®:', todayResult.error)
      }
    } catch (error) {
      console.error('Ï≤¥Ìóò???∞Ïù¥??Î°úÎî© ?§Î•ò:', error)
      // Í∏∞Î≥∏Í∞??§Ï†ï
      setExperienceStats({ total: 0, recruiting: 0, ongoing: 0, completed: 0 })
    }
  }, [])

  const loadApplications = useCallback(async () => {
    setApplicationsLoading(true)
    try {
      console.log('=== ?†Ï≤≠ ?∞Ïù¥??Î°úÎî© ?úÏûë ===')
      const result = await getAllApplications()
      console.log('?†Ï≤≠ ?∞Ïù¥??Î°úÎî© Í≤∞Í≥º:', result)
      if (result.success) {
        console.log('Î°úÎìú???†Ï≤≠ ?∞Ïù¥????', result.applications?.length || 0)
        setApplications(result.applications || [])
      } else {
        console.error('?†Ï≤≠ ?∞Ïù¥??Î°úÎî© ?§Ìå®:', result.error)
      }
    } catch (error) {
      console.error('?†Ï≤≠??Î™©Î°ù Î°úÎî© ?§Î•ò:', error)
    } finally {
      setApplicationsLoading(false)
    }
  }, [])

  const loadApplicationStats = useCallback(async () => {
    try {
      const result = await getApplicationStats()
      if (result.success) {
        const stats = result.stats || { total: 0, pending: 0, approved: 0, rejected: 0 }
        
        // Ï∂îÍ? ?µÍ≥Ñ Í≥ÑÏÇ∞
        const now = new Date()
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
        const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000)
        const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000)
        
        // ?îÎ≤ÑÍπÖÏùÑ ?ÑÌïú Î°úÍ∑∏
        console.log('=== ?†Ï≤≠ ?µÍ≥Ñ Í≥ÑÏÇ∞ ?úÏûë ===')
        console.log('?ÑÏ≤¥ ?†Ï≤≠ ??', applications.length)
        console.log('?§Îäò ?†Ïßú:', today)
        console.log('?ºÏ£º????', weekAgo)
        console.log('?úÎã¨ ??', monthAgo)
        
        const todayApplications = applications.filter(app => {
          let appDate
          if (app.createdAt && typeof app.createdAt === 'object' && 'toDate' in app.createdAt) {
            // Firestore Timestamp Í∞ùÏ≤¥??Í≤ΩÏö∞
            appDate = app.createdAt.toDate()
          } else {
            // Î¨∏Ïûê?¥Ïù¥Í±∞ÎÇò ?§Î•∏ ?ïÌÉú??Í≤ΩÏö∞
            appDate = new Date(app.createdAt)
          }
          console.log(`?†Ï≤≠ ${app.name}: createdAt=${app.createdAt}, ?åÏã±???†Ïßú=${appDate}`)
          return appDate >= today
        }).length
        
        const thisWeekApplications = applications.filter(app => {
          let appDate
          if (app.createdAt && typeof app.createdAt === 'object' && 'toDate' in app.createdAt) {
            appDate = app.createdAt.toDate()
          } else {
            appDate = new Date(app.createdAt)
          }
          return appDate >= weekAgo
        }).length
        
        const thisMonthApplications = applications.filter(app => {
          let appDate
          if (app.createdAt && typeof app.createdAt === 'object' && 'toDate' in app.createdAt) {
            appDate = app.createdAt.toDate()
          } else {
            appDate = new Date(app.createdAt)
          }
          return appDate >= monthAgo
        }).length
        
        console.log('?§Îäò ?†Ï≤≠:', todayApplications)
        console.log('?¥Î≤à Ï£??†Ï≤≠:', thisWeekApplications)
        console.log('?¥Î≤à ???†Ï≤≠:', thisMonthApplications)
        
        setApplicationStats({
          ...stats,
          todayApplications,
          thisWeekApplications,
          thisMonthApplications
        })
      }
    } catch {
      console.error('?†Ï≤≠ ?µÍ≥Ñ Î°úÎî© ?§Î•ò')
    }
  }, [])

  const loadAllExperiences = useCallback(async () => {
    setExperiencesLoading(true)
    try {
      const { collection, getDocs, query, orderBy } = await import('firebase/firestore')
      const { db } = await import('@/lib/firebase')
      
      const experiencesRef = collection(db, 'experiences')
      const q = query(experiencesRef, orderBy('createdAt', 'desc'))
      const snapshot = await getDocs(q)
      
      const experiencesData = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as Experience[]
      
      setAllExperiences(experiencesData)
    } catch {
      console.error('Ï≤¥Ìóò??Î™©Î°ù Î°úÎî© ?§Î•ò')
    } finally {
      setExperiencesLoading(false)
    }
  }, [])

  // Ï≤¥Ìóò???ÅÌÉú ?òÏ†ï
  const handleExperienceStatusUpdate = useCallback(async (experienceId: string, newStatus: 'recruiting' | 'ongoing' | 'completed') => {
    try {
      const { doc, updateDoc } = await import('firebase/firestore')
      const { db } = await import('@/lib/firebase')
      
      const experienceRef = doc(db, 'experiences', experienceId)
      await updateDoc(experienceRef, {
        status: newStatus,
        updatedAt: new Date()
      })
      
      setExperienceMessage('Ï≤¥Ìóò???ÅÌÉúÍ∞Ä ?±Í≥µ?ÅÏúºÎ°??ÖÎç∞?¥Ìä∏?òÏóà?µÎãà??')
      loadAllExperiences() // ?∞Ïù¥???àÎ°úÍ≥†Ïπ®
    } catch {
      console.error('Ï≤¥Ìóò???ÅÌÉú ?ÖÎç∞?¥Ìä∏ ?§Î•ò')
      setExperienceMessage('Ï≤¥Ìóò???ÅÌÉú ?ÖÎç∞?¥Ìä∏???§Ìå®?àÏäµ?àÎã§.')
    }
  }, [loadAllExperiences])

  // Ï≤¥Ìóò????†ú
  const handleExperienceDelete = useCallback(async (experienceId: string, experienceTitle: string) => {
    if (!confirm(`"${experienceTitle}" Ï≤¥Ìóò?®ÏùÑ ??†ú?òÏãúÍ≤†Ïäµ?àÍπå? ???ëÏóÖ?Ä ?òÎèåÎ¶????ÜÏäµ?àÎã§.`)) {
      return
    }
    
    try {
      const { doc, deleteDoc } = await import('firebase/firestore')
      const { db } = await import('@/lib/firebase')
      
      const experienceRef = doc(db, 'experiences', experienceId)
      await deleteDoc(experienceRef)
      
      setExperienceMessage('Ï≤¥Ìóò?®Ïù¥ ?±Í≥µ?ÅÏúºÎ°???†ú?òÏóà?µÎãà??')
      loadAllExperiences() // ?∞Ïù¥???àÎ°úÍ≥†Ïπ®
    } catch {
      console.error('Ï≤¥Ìóò????†ú ?§Î•ò')
      setExperienceMessage('Ï≤¥Ìóò????†ú???§Ìå®?àÏäµ?àÎã§.')
    }
  }, [loadAllExperiences])

  // ?ëÏ? ?§Ïö¥Î°úÎìú ?∞Ïù¥??Î°úÎìú
  const loadExcelData = useCallback(async () => {
    try {
      setExcelLoading(true)
      setExcelMessage('')
      
      // Î™®Îì† ?†Ï≤≠ ?∞Ïù¥?∞Ï? Ï≤¥Ìóò???∞Ïù¥?∞Î? Í∞Ä?∏Ïò¥
      const [applicationsData, experiencesData] = await Promise.all([
        getAllApplications(),
        getRecentExperiences()
      ])
      
      // ?ëÏ????∞Ïù¥??Î≥Ä??      const excelData = applicationsData.applications?.map(app => {
        const experience = experiencesData.experiences?.find(exp => exp.id === app.experienceId)
        return {
          '?†Ï≤≠ ID': app.id,
          '?†Ï≤≠???¥Î¶Ñ': app.name,
          'Ï≤¥Ìóò???úÎ™©': app.experienceTitle,
          '?¨Í∂åÎ≤àÌò∏': app.passportNumber,
          'Ï≤¥Ìóò??Ïπ¥ÌÖåÍ≥†Î¶¨': experience?.category || '-',
          'Ï≤¥Ìóò ?ºÏ†ï': experience?.date || '-',
          'Ï≤¥Ìóò ?•ÏÜå': experience?.location || '-',
          '?†Ï≤≠ ?ÅÌÉú': app.status === 'pending' ? '?ÄÍ∏∞Ï§ë' : 
                     app.status === 'approved' ? '?πÏù∏' : 
                     app.status === 'rejected' ? 'Í±∞Ï†à' : app.status,
          '?†Ï≤≠ ?ºÏãú': app.createdAt ? (app.createdAt instanceof Date ? app.createdAt.toLocaleString('ko-KR') : new Date(app.createdAt).toLocaleString('ko-KR')) : '?†Ïßú ?ÜÏùå',
          'Ï≤òÎ¶¨ ?ºÏãú': app.updatedAt ? (app.updatedAt instanceof Date ? app.updatedAt.toLocaleString('ko-KR') : new Date(app.updatedAt).toLocaleString('ko-KR')) : '?†Ïßú ?ÜÏùå',
          'Î∞©Î¨∏ ?†Ïßú': app.visitDate,
          'Î∞©Î¨∏ ?úÍ∞Ñ': app.visitTime,
          'Î∞©Î¨∏ ?üÏàò': app.visitCount,
          '?ÑÏ±ó ID': app.wechatId,
          '?îÎ°ú????: app.followerCount
        }
      })
      
      setExcelData(excelData || [])
      setExcelMessage(`Ï¥?${excelData?.length || 0}Í∞úÏùò ?†Ï≤≠ ?∞Ïù¥?∞Î? Î°úÎìú?àÏäµ?àÎã§.`)
    } catch (error) {
      console.error('?ëÏ? ?∞Ïù¥??Î°úÎìú ?§Î•ò:', error)
      setExcelMessage('?∞Ïù¥??Î°úÎìú???§Ìå®?àÏäµ?àÎã§.')
    } finally {
      setExcelLoading(false)
    }
  }, [])

  // ?ëÏ? ?§Ïö¥Î°úÎìú ?§Ìñâ
  const handleExcelDownload = useCallback(async () => {
    try {
      const ExcelJS = await import('exceljs')
      
      if (excelData.length === 0) {
        setExcelMessage('?§Ïö¥Î°úÎìú???∞Ïù¥?∞Í? ?ÜÏäµ?àÎã§. Î®ºÏ? ?∞Ïù¥?∞Î? Î°úÎìú?¥Ï£º?∏Ïöî.')
        return
      }
      
      // ?åÌÅ¨Î∂??ùÏÑ±
      const workbook = new ExcelJS.Workbook()
      const worksheet = workbook.addWorksheet('Ï≤¥Ìóò???†Ï≤≠Î¶¨Ïä§??)
      
      // Ïª¨Îüº ?§Îçî ?§Ï†ï
      worksheet.columns = [
        { header: '?†Ï≤≠ ID', key: 'applicationId', width: 15 },
        { header: '?†Ï≤≠???¥Î¶Ñ', key: 'applicantName', width: 12 },
        { header: '?†Ï≤≠???¥Î©î??, key: 'applicantEmail', width: 25 },
        { header: '?†Ï≤≠???ÑÌôîÎ≤àÌò∏', key: 'applicantPhone', width: 15 },
        { header: 'Ï≤¥Ìóò???úÎ™©', key: 'experienceTitle', width: 30 },
        { header: 'Ï≤¥Ìóò??Ïπ¥ÌÖåÍ≥†Î¶¨', key: 'experienceCategory', width: 15 },
        { header: 'Ï≤¥Ìóò ?ºÏ†ï', key: 'experienceDate', width: 15 },
        { header: 'Ï≤¥Ìóò ?•ÏÜå', key: 'experienceLocation', width: 20 },
        { header: '?†Ï≤≠ ?ÅÌÉú', key: 'status', width: 10 },
        { header: '?†Ï≤≠ ?ºÏãú', key: 'appliedAt', width: 20 },
        { header: 'Ï≤òÎ¶¨ ?ºÏãú', key: 'processedAt', width: 20 },
        { header: '?†Ï≤≠ ?ôÍ∏∞', key: 'motivation', width: 30 },
        { header: 'Í≤ΩÌóò Î∞?Í¥Ä?¨ÏÇ¨', key: 'experience', width: 30 },
        { header: 'Ï∂îÍ? ?ïÎ≥¥', key: 'additionalInfo', width: 30 }
      ]
      
      // ?∞Ïù¥??Ï∂îÍ?
      worksheet.addRows(excelData)
      
      // ?§Îçî ?§Ì????§Ï†ï
      worksheet.getRow(1).font = { bold: true }
      worksheet.getRow(1).fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFE6E6FA' }
      }
      
      // ?åÏùºÎ™??ùÏÑ± (?ÑÏû¨ ?†Ïßú ?¨Ìï®)
      const now = new Date()
      const dateStr = now.toISOString().split('T')[0].replace(/-/g, '')
      const fileName = `Ï≤¥Ìóò?®Ïã†Ï≤?¶¨?§Ìä∏_${dateStr}.xlsx`
      
      // ?åÏùº ?§Ïö¥Î°úÎìú
      const buffer = await workbook.xlsx.writeBuffer()
      const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' })
      const url = window.URL.createObjectURL(blob)
      const link = document.createElement('a')
      link.href = url
      link.download = fileName
      link.click()
      window.URL.revokeObjectURL(url)
      
      setExcelMessage('?ëÏ? ?åÏùº???±Í≥µ?ÅÏúºÎ°??§Ïö¥Î°úÎìú?òÏóà?µÎãà??')
    } catch (error) {
      console.error('?ëÏ? ?§Ïö¥Î°úÎìú ?§Î•ò:', error)
      setExcelMessage('?ëÏ? ?§Ïö¥Î°úÎìú???§Ìå®?àÏäµ?àÎã§.')
    }
  }, [excelData])

  // Ïπ¥Îìú ?ùÏÑ±/?òÏ†ï ?∏Îì§??  const handleCardSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault()
    
    // ?∏Ï¶ù ?ÅÌÉú ?ïÏù∏
    const { auth } = await import('@/lib/firebase')
    
    console.log('=== Ïπ¥Îìú ?ùÏÑ±/?òÏ†ï ?úÏûë ===')
    console.log('?ÑÏû¨ ?∏Ï¶ù ?ÅÌÉú ?ïÏù∏ Ï§?..')
    console.log('?òÏ†ï Î™®Îìú:', editingCardId ? '?òÏ†ï' : '?ùÏÑ±')
    
    // ?∏Ï¶ù ?ÅÌÉú ?ïÏù∏
    const user = auth.currentUser
    console.log('?ÑÏû¨ ?¨Ïö©??', user ? {
      uid: user.uid,
      email: user.email,
      displayName: user.displayName
    } : 'Î°úÍ∑∏?∏ÎêòÏßÄ ?äÏùå')
    
    if (!user) {
      setCardMessage('Î°úÍ∑∏?∏Ïù¥ ?ÑÏöî?©Îãà?? ?§Ïãú Î°úÍ∑∏?∏Ìï¥Ï£ºÏÑ∏??')
      return
    }
    
    // ?ÑÏàò ?ÑÎìú Í≤ÄÏ¶?    if (!cardForm.activityType || !cardForm.title || !cardForm.titleZh || !cardForm.category || 
        !cardForm.description || !cardForm.descriptionZh || !cardForm.maxParticipants || 
        !cardForm.experienceDate || !cardForm.recruitmentStartDate || !cardForm.recruitmentEndDate ||
        !cardForm.location || !cardForm.locationZh) {
      setCardMessage('Î™®Îì† ?ÑÏàò ?ÑÎìúÎ•??ÖÎ†•?¥Ï£º?∏Ïöî.')
      return
    }
    
    try {
      setCardSubmitting(true)
      setCardMessage('')
      
      const { collection, addDoc, Timestamp } = await import('firebase/firestore')
      const { db } = await import('@/lib/firebase')
      const { uploadImage } = await import('@/lib/imageService')
      
      // Ï≤¥Ìóò ?úÍ∞Ñ Ï°∞Ìï©
      const experienceTime = cardForm.experienceTimePeriod && cardForm.experienceTimeHour && cardForm.experienceTimeMinute
        ? `${cardForm.experienceTimePeriod} ${cardForm.experienceTimeHour}??${cardForm.experienceTimeMinute}Î∂?
        : ''
      
      // Ïπ¥ÌÖåÍ≥†Î¶¨ Í≤∞Ï†ï (Í∏∞Ì???Í≤ΩÏö∞ Ïª§Ïä§?Ä Ïπ¥ÌÖåÍ≥†Î¶¨ ?¨Ïö©)
      const finalCategory = cardForm.category === 'other' ? cardForm.customCategory : cardForm.category
      
      // Î™®Ïßë ÎßàÍ∞ê?ºÍπåÏßÄ ?®Ï? ?ºÏàò Í≥ÑÏÇ∞
      const today = new Date()
      const endDate = new Date(cardForm.recruitmentEndDate)
      const diffTime = endDate.getTime() - today.getTime()
      const daysLeft = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
      
      // ?¥Î?ÏßÄ ?ÖÎ°ú??Ï≤òÎ¶¨
      let imageUrl = editingCardId ? cardForm.imagePreview : '/api/placeholder/300/200' // ?òÏ†ï Î™®Îìú?êÏÑú??Í∏∞Ï°¥ ?¥Î?ÏßÄ ?†Ï?
      let allImageUrls: string[] = editingCardId ? cardForm.imagePreviews : [] // ?òÏ†ï Î™®Îìú?êÏÑú??Í∏∞Ï°¥ ?¥Î?ÏßÄ???†Ï?
      
      if (cardForm.images.length > 0) {
        console.log('=== ?¨Îü¨ ?¥Î?ÏßÄ ?ÖÎ°ú???úÏûë ===')
        console.log('?ÖÎ°ú?úÌï† ?¥Î?ÏßÄ ??', cardForm.images.length)
        
        const timestamp = Date.now()
        const uploadPromises = cardForm.images.map(async (imageFile, index) => {
          const fileName = `experience_${timestamp}_${index}_${imageFile.name}`
          const storagePath = `images/${fileName}`
          console.log(`?¥Î?ÏßÄ ${index + 1} ?ÖÎ°ú??Ï§?`, storagePath)
          
          const uploadResult = await uploadImage(imageFile, storagePath)
          if (uploadResult.success && uploadResult.url) {
            console.log(`???¥Î?ÏßÄ ${index + 1} ?ÖÎ°ú???±Í≥µ:`, uploadResult.url)
            return uploadResult.url
          } else {
            console.error(`???¥Î?ÏßÄ ${index + 1} ?ÖÎ°ú???§Ìå®:`, uploadResult.error)
            return null
          }
        })
        
        try {
          const uploadResults = await Promise.all(uploadPromises)
          const newImageUrls = uploadResults.filter(url => url !== null) as string[]
          
          if (newImageUrls.length > 0) {
            // ?òÏ†ï Î™®Îìú?êÏÑú?????¥Î?ÏßÄÎß??¨Ïö© (Í∏∞Ï°¥ ?¥Î?ÏßÄ ÍµêÏ≤¥)
            if (editingCardId) {
              allImageUrls = newImageUrls // Í∏∞Ï°¥ ?¥Î?ÏßÄ ?úÍ±∞?òÍ≥† ???¥Î?ÏßÄÎß??¨Ïö©
              imageUrl = newImageUrls[0] // ???¥Î?ÏßÄ??Ï≤?Î≤àÏß∏Î•?Î©îÏù∏ ?¥Î?ÏßÄÎ°?            } else {
              allImageUrls = newImageUrls
              imageUrl = allImageUrls[0] // Ï≤?Î≤àÏß∏ ?¥Î?ÏßÄÎ•?Î©îÏù∏ ?¥Î?ÏßÄÎ°??¨Ïö©
            }
            console.log('??Î™®Îì† ?¥Î?ÏßÄ ?ÖÎ°ú???ÑÎ£å:', allImageUrls)
            setCardMessage(`${newImageUrls.length}Í∞úÏùò ???¥Î?ÏßÄÍ∞Ä ?±Í≥µ?ÅÏúºÎ°??ÖÎ°ú?úÎêò?àÏäµ?àÎã§!`)
          } else {
            console.error('??Î™®Îì† ?¥Î?ÏßÄ ?ÖÎ°ú???§Ìå®')
            setCardMessage('?¥Î?ÏßÄ ?ÖÎ°ú?úÏóê ?§Ìå®?àÏäµ?àÎã§. Í∏∞Ï°¥ ?¥Î?ÏßÄÎ•??†Ï??©Îãà??')
          }
        } catch (error) {
          console.error('???¥Î?ÏßÄ ?ÖÎ°ú???àÏô∏:', error)
          const errorMessage = error instanceof Error ? error.message : '?????ÜÎäî ?§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.';
          setCardMessage(`?¥Î?ÏßÄ ?ÖÎ°ú??Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§: ${errorMessage}`)
        }
      } else if (cardForm.image) {
        // ?®Ïùº ?¥Î?ÏßÄ Ï≤òÎ¶¨ (Í∏∞Ï°¥ Î°úÏßÅ)
        console.log('=== ?®Ïùº ?¥Î?ÏßÄ ?ÖÎ°ú???úÏûë ===')
        const timestamp = Date.now()
        const fileName = `experience_${timestamp}_${cardForm.image.name}`
        const storagePath = `images/${fileName}`
        
        try {
          const uploadResult = await uploadImage(cardForm.image, storagePath)
          if (uploadResult.success && uploadResult.url) {
            // ?òÏ†ï Î™®Îìú?êÏÑú?????¥Î?ÏßÄÎß??¨Ïö© (Í∏∞Ï°¥ ?¥Î?ÏßÄ ÍµêÏ≤¥)
            if (editingCardId) {
              allImageUrls = [uploadResult.url] // Í∏∞Ï°¥ ?¥Î?ÏßÄ ?úÍ±∞?òÍ≥† ???¥Î?ÏßÄÎß??¨Ïö©
              imageUrl = uploadResult.url
            } else {
              allImageUrls = [uploadResult.url]
              imageUrl = uploadResult.url
            }
            console.log('???®Ïùº ?¥Î?ÏßÄ ?ÖÎ°ú???±Í≥µ:', uploadResult.url)
            setCardMessage('?¥Î?ÏßÄÍ∞Ä ?±Í≥µ?ÅÏúºÎ°??ÖÎ°ú?úÎêò?àÏäµ?àÎã§!')
          } else {
            console.error('???®Ïùº ?¥Î?ÏßÄ ?ÖÎ°ú???§Ìå®:', uploadResult.error)
            setCardMessage('?¥Î?ÏßÄ ?ÖÎ°ú?úÏóê ?§Ìå®?àÏäµ?àÎã§. Í∏∞Ï°¥ ?¥Î?ÏßÄÎ•??†Ï??©Îãà??')
          }
        } catch (error) {
          console.error('???®Ïùº ?¥Î?ÏßÄ ?ÖÎ°ú???àÏô∏:', error)
          const errorMessage = error instanceof Error ? error.message : '?????ÜÎäî ?§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.';
          setCardMessage(`?¥Î?ÏßÄ ?ÖÎ°ú??Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§: ${errorMessage}`)
        }
      } else {
        console.log('?¥Î?ÏßÄÍ∞Ä ?†ÌÉù?òÏ? ?äÏùå, Í∏∞Ï°¥ ?¥Î?ÏßÄ ?†Ï?')
        if (editingCardId) {
          console.log('?òÏ†ï Î™®Îìú: Í∏∞Ï°¥ ?¥Î?ÏßÄ ?†Ï?')
          // ?òÏ†ï Î™®Îìú?êÏÑú ???¥Î?ÏßÄÍ∞Ä ?ÜÏúºÎ©?Í∏∞Ï°¥ ?¥Î?ÏßÄ ?†Ï?
          imageUrl = cardForm.imagePreview || '/api/placeholder/300/200'
          allImageUrls = cardForm.imagePreviews || []
        } else {
          console.log('?ùÏÑ± Î™®Îìú: Í∏∞Î≥∏ ?¥Î?ÏßÄ ?¨Ïö©')
        }
      }
      
      console.log('=== ÏµúÏ¢Ö ?¥Î?ÏßÄ ?ïÎ≥¥ ===')
      console.log('Î©îÏù∏ ?¥Î?ÏßÄ (image):', imageUrl)
      console.log('Î™®Îì† ?¥Î?ÏßÄ (images):', allImageUrls)
      console.log('?òÏ†ï Î™®Îìú:', editingCardId ? '?òÏ†ï' : '?ùÏÑ±')
      
      const newExperience = {
        activityType: cardForm.activityType,
        title: cardForm.title,
        titleZh: cardForm.titleZh,
        description: cardForm.description,
        descriptionZh: cardForm.descriptionZh,
        category: finalCategory,
        maxParticipants: parseInt(cardForm.maxParticipants),
        participants: 0,
        daysLeft: Math.max(0, daysLeft), // ?¨Î∞îÎ•??ºÏàò Í≥ÑÏÇ∞
        image: imageUrl, // Ï≤?Î≤àÏß∏ ?¥Î?ÏßÄ (Ïπ¥Îìú??
        images: allImageUrls, // Î™®Îì† ?¥Î?ÏßÄ (?ÅÏÑ∏ ?òÏù¥ÏßÄ??
        isNew: false,
        status: 'recruiting',
        recruitmentStartDate: cardForm.recruitmentStartDate,
        recruitmentEndDate: cardForm.recruitmentEndDate,
        date: cardForm.experienceDate,
        time: experienceTime,
        location: cardForm.location,
        locationZh: cardForm.locationZh,
        benefits: cardForm.benefits.filter(b => b.trim() !== ''),
        benefitsZh: cardForm.benefitsZh.filter(b => b.trim() !== ''),
        requirements: cardForm.requirements.filter(r => r.trim() !== ''),
        requirementsZh: cardForm.requirementsZh.filter(r => r.trim() !== ''),
        contact: 'support@naver.com',
        applications: [],
        createdAt: Timestamp.now(),
        updatedAt: Timestamp.now()
      }
      
      if (editingCardId) {
        // ?òÏ†ï Î™®Îìú
        const { doc, updateDoc } = await import('firebase/firestore')
        const experienceRef = doc(db, 'experiences', editingCardId)
        await updateDoc(experienceRef, {
          ...newExperience,
          updatedAt: Timestamp.now()
        })
        setCardMessage('Ï≤¥Ìóò??Ïπ¥ÎìúÍ∞Ä ?±Í≥µ?ÅÏúºÎ°??òÏ†ï?òÏóà?µÎãà??')
        setEditingCardId(null)
      } else {
        // ?ùÏÑ± Î™®Îìú
        const experiencesRef = collection(db, 'experiences')
        const docRef = await addDoc(experiencesRef, newExperience)
        setCardMessage('Ï≤¥Ìóò??Ïπ¥ÎìúÍ∞Ä ?±Í≥µ?ÅÏúºÎ°??ùÏÑ±?òÏóà?µÎãà??')
      }
      
      // ??Ï¥àÍ∏∞??(?òÏ†ï ?ÑÎ£å ?ÑÏóêÎß?
      if (!editingCardId) {
        setCardForm({
          activityType: '',
          title: '',
          titleZh: '',
          category: '',
          customCategory: '',
          description: '',
          descriptionZh: '',
          maxParticipants: '',
          experienceDate: '',
          experienceTimePeriod: '',
          experienceTimeHour: '',
          experienceTimeMinute: '',
          recruitmentStartDate: '',
          recruitmentEndDate: '',
          location: '',
          locationZh: '',
          benefits: [''],
          benefitsZh: [''],
          requirements: [''],
          requirementsZh: [''],
          image: null,
          imagePreview: '',
          images: [],
          imagePreviews: []
        })
      }
      setShowCustomCategory(false)
      
      // Ï≤¥Ìóò??Î™©Î°ù ?àÎ°úÍ≥†Ïπ®
      loadAllExperiences()
      
    } catch {
      console.error('Ïπ¥Îìú ?ùÏÑ± ?§Î•ò')
      setCardMessage('Ïπ¥Îìú ?ùÏÑ±???§Ìå®?àÏäµ?àÎã§. ?§Ïãú ?úÎèÑ?¥Ï£º?∏Ïöî.')
    } finally {
      setCardSubmitting(false)
    }
  }, [cardForm, loadAllExperiences, editingCardId])

  // Ïπ¥Îìú ?òÏ†ï ?∏Îì§??  const handleEditCard = useCallback((experience: Experience) => {
    // Ïπ¥Îìú ?òÏ†ï Î™®ÎìúÎ°??ÑÌôò
    setEditingCardId(experience.id)
    setCardForm({
      activityType: experience.activityType || '',
      title: experience.title,
      titleZh: experience.titleZh || '',
      category: experience.category,
      customCategory: '',
      description: experience.description,
      descriptionZh: experience.descriptionZh || '',
      maxParticipants: experience.maxParticipants.toString(),
      experienceDate: experience.date || '',
      experienceTimePeriod: '',
      experienceTimeHour: '',
      experienceTimeMinute: '',
      recruitmentStartDate: experience.recruitmentStartDate || '',
      recruitmentEndDate: experience.recruitmentEndDate || '',
      location: experience.location || '',
      locationZh: experience.locationZh || '',
      benefits: experience.benefits || [''],
      benefitsZh: experience.benefitsZh || [''],
      requirements: experience.requirements || [''],
      requirementsZh: experience.requirementsZh || [''],
      image: null,
      imagePreview: experience.image || '',
      images: [],
      imagePreviews: experience.images || []
    })
    setActiveTab('create-card')
    setCardMessage('Ïπ¥Îìú ?òÏ†ï Î™®Îìú?ÖÎãà?? ?¥Ïö©???òÏ†ï?òÍ≥† ?Ä?•Ìïò?∏Ïöî.')
  }, [])

  // Ïπ¥Îìú ??†ú ?∏Îì§??  const handleDeleteCard = useCallback(async (experienceId: string) => {
    if (!confirm('?ïÎßêÎ°???Ïπ¥ÎìúÎ•???†ú?òÏãúÍ≤†Ïäµ?àÍπå? ???ëÏóÖ?Ä ?òÎèåÎ¶????ÜÏäµ?àÎã§.')) {
      return
    }

    try {
      const { doc, deleteDoc } = await import('firebase/firestore')
      const { db } = await import('@/lib/firebase')
      
      await deleteDoc(doc(db, 'experiences', experienceId))
      setCardMessage('Ïπ¥ÎìúÍ∞Ä ?±Í≥µ?ÅÏúºÎ°???†ú?òÏóà?µÎãà??')
      
      // Ï≤¥Ìóò??Î™©Î°ù ?àÎ°úÍ≥†Ïπ®
      loadAllExperiences()
    } catch (error) {
      console.error('Ïπ¥Îìú ??†ú ?§Î•ò:', error)
      setCardMessage('Ïπ¥Îìú ??†ú???§Ìå®?àÏäµ?àÎã§.')
    }
  }, [loadAllExperiences])

  // ?úÌÉù Ï∂îÍ?/??†ú
  const addBenefit = useCallback(() => {
    setCardForm(prev => ({
      ...prev,
      benefits: [...prev.benefits, '']
    }))
  }, [])

  const removeBenefit = useCallback((index: number) => {
    setCardForm(prev => ({
      ...prev,
      benefits: prev.benefits.filter((_, i) => i !== index)
    }))
  }, [])

  const updateBenefit = useCallback((index: number, value: string) => {
    setCardForm(prev => ({
      ...prev,
      benefits: prev.benefits.map((benefit, i) => i === index ? value : benefit)
    }))
  }, [])

  // Ï°∞Í±¥ Ï∂îÍ?/??†ú
  const addRequirement = useCallback(() => {
    setCardForm(prev => ({
      ...prev,
      requirements: [...prev.requirements, '']
    }))
  }, [])

  const removeRequirement = useCallback((index: number) => {
    setCardForm(prev => ({
      ...prev,
      requirements: prev.requirements.filter((_, i) => i !== index)
    }))
  }, [])

  const updateRequirement = useCallback((index: number, value: string) => {
    setCardForm(prev => ({
      ...prev,
      requirements: prev.requirements.map((requirement, i) => i === index ? value : requirement)
    }))
  }, [])

  // Ï§ëÍµ≠???úÌÉù Ï∂îÍ?/??†ú/?òÏ†ï
  const addBenefitZh = useCallback(() => {
    setCardForm(prev => ({
      ...prev,
      benefitsZh: [...prev.benefitsZh, '']
    }))
  }, [])

  const removeBenefitZh = useCallback((index: number) => {
    setCardForm(prev => ({
      ...prev,
      benefitsZh: prev.benefitsZh.filter((_, i) => i !== index)
    }))
  }, [])

  const updateBenefitZh = useCallback((index: number, value: string) => {
    setCardForm(prev => ({
      ...prev,
      benefitsZh: prev.benefitsZh.map((benefit, i) => i === index ? value : benefit)
    }))
  }, [])

  // Ï§ëÍµ≠??Ï°∞Í±¥ Ï∂îÍ?/??†ú/?òÏ†ï
  const addRequirementZh = useCallback(() => {
    setCardForm(prev => ({
      ...prev,
      requirementsZh: [...prev.requirementsZh, '']
    }))
  }, [])

  const removeRequirementZh = useCallback((index: number) => {
    setCardForm(prev => ({
      ...prev,
      requirementsZh: prev.requirementsZh.filter((_, i) => i !== index)
    }))
  }, [])

  const updateRequirementZh = useCallback((index: number, value: string) => {
    setCardForm(prev => ({
      ...prev,
      requirementsZh: prev.requirementsZh.map((requirement, i) => i === index ? value : requirement)
    }))
  }, [])

  // ?¥Î?ÏßÄ ?ÖÎ°ú???∏Îì§??  const handleImageUpload = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      setCardForm(prev => ({
        ...prev,
        image: file,
        imagePreview: URL.createObjectURL(file)
      }))
    }
  }, [])

  // ?¥Î?ÏßÄ ?úÍ±∞ ?∏Îì§??  const handleImageRemove = useCallback(() => {
    if (cardForm.imagePreview) {
      URL.revokeObjectURL(cardForm.imagePreview)
    }
    setCardForm(prev => ({
      ...prev,
      image: null,
      imagePreview: ''
    }))
  }, [cardForm.imagePreview])

  // ?¨Îü¨ ?¥Î?ÏßÄ ?ÖÎ°ú???∏Îì§??  const handleMultipleImageUpload = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || [])
    if (files.length > 0) {
      const newPreviews = files.map(file => URL.createObjectURL(file))
      
      setCardForm(prev => ({
        ...prev,
        images: [...prev.images, ...files],
        imagePreviews: [...prev.imagePreviews, ...newPreviews],
        // Ï≤?Î≤àÏß∏ ?¥Î?ÏßÄ??Î©îÏù∏ ?¥Î?ÏßÄÎ°úÎèÑ ?§Ï†ï
        image: prev.image || files[0],
        imagePreview: prev.imagePreview || newPreviews[0]
      }))
    }
  }, [])

  // Í∞úÎ≥Ñ ?¥Î?ÏßÄ ?úÍ±∞ ?∏Îì§??  const handleImageRemoveAt = useCallback((index: number) => {
    setCardForm(prev => {
      const newImages = [...prev.images]
      const newPreviews = [...prev.imagePreviews]
      
      // URL ?¥Ï†ú
      URL.revokeObjectURL(newPreviews[index])
      
      // Î∞∞Ïó¥?êÏÑú ?úÍ±∞
      newImages.splice(index, 1)
      newPreviews.splice(index, 1)
      
      // Î©îÏù∏ ?¥Î?ÏßÄÍ∞Ä ?úÍ±∞??Í≤ΩÏö∞ Ï≤?Î≤àÏß∏ ?¥Î?ÏßÄÎ°?Î≥ÄÍ≤?      let newMainImage = prev.image
      let newMainPreview = prev.imagePreview
      
      if (index === 0 && newImages.length > 0) {
        newMainImage = newImages[0]
        newMainPreview = newPreviews[0]
      } else if (newImages.length === 0) {
        newMainImage = null
        newMainPreview = ''
      }
      
      return {
        ...prev,
        images: newImages,
        imagePreviews: newPreviews,
        image: newMainImage,
        imagePreview: newMainPreview
      }
    })
  }, [])

  // Î™®Îì† ?¥Î?ÏßÄ ?úÍ±∞ ?∏Îì§??  const handleAllImagesRemove = useCallback(() => {
    // Î™®Îì† ÎØ∏Î¶¨Î≥¥Í∏∞ URL ?¥Ï†ú
    cardForm.imagePreviews.forEach(url => URL.revokeObjectURL(url))
    if (cardForm.imagePreview) {
      URL.revokeObjectURL(cardForm.imagePreview)
    }
    
    setCardForm(prev => ({
      ...prev,
      images: [],
      imagePreviews: [],
      image: null,
      imagePreview: ''
    }))
  }, [cardForm.imagePreviews, cardForm.imagePreview])

  // Ï≤¥Ìóò?®Î≥Ñ ?†Ï≤≠?∏Ïõê Í∞Ä?∏Ïò§Í∏?  const loadExperienceApplicationCounts = useCallback(async () => {
    try {
      console.log('?†Ï≤≠?∏Ïõê Î°úÎî© ?úÏûë, Ï≤¥Ìóò????', allExperiences.length)
      const { doc, getDoc } = await import('firebase/firestore')
      const { db } = await import('@/lib/firebase')
      const counts: {[key: string]: number} = {}
      
      for (const experience of allExperiences) {
        console.log(`Ï≤¥Ìóò??${experience.id} ?†Ï≤≠?∏Ïõê Î°úÎî© Ï§?..`)
        try {
          const experienceRef = doc(db, 'experiences', experience.id)
          const experienceDoc = await getDoc(experienceRef)
          
          if (experienceDoc.exists()) {
            const data = experienceDoc.data()
            const applications = data.applications || []
            counts[experience.id] = applications.length
            console.log(`Ï≤¥Ìóò??${experience.id} ?†Ï≤≠?∏Ïõê:`, applications.length)
          } else {
            counts[experience.id] = 0
            console.log(`Ï≤¥Ìóò??${experience.id} Î¨∏ÏÑúÍ∞Ä Ï°¥Ïû¨?òÏ? ?äÏùå`)
          }
        } catch (expError) {
          console.error(`Ï≤¥Ìóò??${experience.id} Î°úÎî© ?§Î•ò:`, expError)
          counts[experience.id] = 0
        }
      }
      
      console.log('ÏµúÏ¢Ö ?†Ï≤≠?∏Ïõê ?∞Ïù¥??', counts)
      setExperienceApplicationCounts(counts)
    } catch {
      console.error('Ï≤¥Ìóò???†Ï≤≠?∏Ïõê Î°úÎî© ?§Î•ò')
      // ?§Î•ò Î∞úÏÉù ??Í∏∞Î≥∏Í∞??§Ï†ï
      const defaultCounts: {[key: string]: number} = {}
      allExperiences.forEach(exp => {
        defaultCounts[exp.id] = 0
      })
      setExperienceApplicationCounts(defaultCounts)
    }
  }, [allExperiences])

  const handleApplicationStatusUpdate = useCallback(async (applicationId: string, status: 'pending' | 'approved' | 'rejected') => {
    try {
      setApplicationMessage('')
      const result = await updateApplicationStatus(applicationId, status)
      if (result.success) {
        setApplicationMessage('?†Ï≤≠???ÅÌÉúÍ∞Ä ?±Í≥µ?ÅÏúºÎ°??ÖÎç∞?¥Ìä∏?òÏóà?µÎãà??')
        await loadApplications()
        await loadApplicationStats()
      } else {
        setApplicationMessage('?ÅÌÉú ?ÖÎç∞?¥Ìä∏???§Ìå®?àÏäµ?àÎã§.')
      }
    } catch {
      setApplicationMessage('?ÅÌÉú ?ÖÎç∞?¥Ìä∏ Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.')
    }
  }, [loadApplications, loadApplicationStats])

  // ?πÏù∏ Ï∑®ÏÜå ?∏Îì§??  const handleCancelApproval = useCallback(async (applicationId: string) => {
    try {
      setApplicationMessage('')
      const result = await cancelApproval(applicationId)
      if (result.success) {
        setApplicationMessage('?πÏù∏??Ï∑®ÏÜå?òÏóà?µÎãà??')
        await loadApplications()
        await loadApplicationStats()
      } else {
        setApplicationMessage('?πÏù∏ Ï∑®ÏÜå???§Ìå®?àÏäµ?àÎã§.')
      }
    } catch {
      setApplicationMessage('?πÏù∏ Ï∑®ÏÜå Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.')
    }
  }, [loadApplications, loadApplicationStats])

  // Í±∞Î? Ï∑®ÏÜå ?∏Îì§??  const handleCancelRejection = useCallback(async (applicationId: string) => {
    try {
      setApplicationMessage('')
      const result = await cancelRejection(applicationId)
      if (result.success) {
        setApplicationMessage('Í±∞Î?Í∞Ä Ï∑®ÏÜå?òÏóà?µÎãà??')
        await loadApplications()
        await loadApplicationStats()
      } else {
        setApplicationMessage('Í±∞Î? Ï∑®ÏÜå???§Ìå®?àÏäµ?àÎã§.')
      }
    } catch {
      setApplicationMessage('Í±∞Î? Ï∑®ÏÜå Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.')
    }
  }, [loadApplications, loadApplicationStats])

  const handleApplicationDelete = useCallback(async (applicationId: string, applicantName: string) => {
    if (confirm(`${applicantName}???†Ï≤≠?úÎ? ??†ú?òÏãúÍ≤†Ïäµ?àÍπå? ???ëÏóÖ?Ä ?òÎèåÎ¶????ÜÏäµ?àÎã§.`)) {
      try {
        setApplicationMessage('')
        const result = await deleteApplication(applicationId)
        if (result.success) {
          setApplicationMessage('?†Ï≤≠?úÍ? ?±Í≥µ?ÅÏúºÎ°???†ú?òÏóà?µÎãà??')
          await loadApplications()
          await loadApplicationStats()
        } else {
          setApplicationMessage('?†Ï≤≠????†ú???§Ìå®?àÏäµ?àÎã§.')
        }
      } catch {
        setApplicationMessage('?†Ï≤≠????†ú Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.')
      }
    }
  }, [loadApplications, loadApplicationStats])

  const handleRoleUpdate = async (userId: string, newRole: UserRole) => {
    try {
      setUserMessage('')
      const result = await updateUserRole(userId, newRole)
      if (result.success) {
        setUserMessage('?¨Ïö©????ï†???±Í≥µ?ÅÏúºÎ°??ÖÎç∞?¥Ìä∏?òÏóà?µÎãà??')
        await loadUsers() // ?¨Ïö©??Î™©Î°ù ?àÎ°úÍ≥†Ïπ®
        // setEditingUser(null) // ?¨Ïö©?òÏ? ?äÏùå
      } else {
        setUserMessage('??ï† ?ÖÎç∞?¥Ìä∏???§Ìå®?àÏäµ?àÎã§.')
      }
    } catch {
      setUserMessage('??ï† ?ÖÎç∞?¥Ìä∏ Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.')
    }
  }

  const handleUserDelete = async (userId: string, userName: string) => {
    if (confirm(`${userName} ?¨Ïö©?êÎ? ??†ú?òÏãúÍ≤†Ïäµ?àÍπå? ???ëÏóÖ?Ä ?òÎèåÎ¶????ÜÏäµ?àÎã§.`)) {
      try {
        setUserMessage('')
        const result = await deleteUser(userId)
        if (result.success) {
          setUserMessage('?¨Ïö©?êÍ? ?±Í≥µ?ÅÏúºÎ°???†ú?òÏóà?µÎãà??')
          await loadUsers() // ?¨Ïö©??Î™©Î°ù ?àÎ°úÍ≥†Ïπ®
        } else {
          setUserMessage('?¨Ïö©????†ú???§Ìå®?àÏäµ?àÎã§.')
        }
      } catch {
        setUserMessage('?¨Ïö©????†ú Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.')
      }
    }
  }

  const handleSeedData = async () => {
    try {
      const result = await seedExperiences()
      if (result.success) {
        console.log('Ï≤¥Ìóò???∞Ïù¥?∞Í? ?±Í≥µ?ÅÏúºÎ°??Ä?•Îêò?àÏäµ?àÎã§!')
      } else {
        console.log('?∞Ïù¥???Ä??Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.')
      }
    } catch {
      console.log('?∞Ïù¥???Ä??Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.')
    }
  }

  const handleResetData = async () => {
    try {
      const result = await resetExperiences()
      if (result.success) {
        console.log('Ï≤¥Ìóò???∞Ïù¥?∞Í? Ï¥àÍ∏∞?îÎêò?àÏäµ?àÎã§!')
      } else {
        console.log('?∞Ïù¥??Ï¥àÍ∏∞??Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.')
      }
    } catch {
      console.log('?∞Ïù¥??Ï¥àÍ∏∞??Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.')
    }
  }

  // ?¨Ïö©???∞Ïù¥??Î°úÎî©
  useEffect(() => {
    if (isAuthenticated && isAdmin) {
      loadUsers()
      loadUserStats()
      loadExperienceData()
      loadApplications()
      loadApplicationStats()
      loadAllExperiences()
    }
  }, [isAuthenticated, isAdmin, loadUsers, loadUserStats, loadExperienceData, loadApplications, loadApplicationStats, loadAllExperiences])

  // Ï≤¥Ìóò???∞Ïù¥?∞Í? Î°úÎìú?òÎ©¥ ?†Ï≤≠?∏Ïõê??Î°úÎìú
  useEffect(() => {
    if (allExperiences.length > 0) {
      loadExperienceApplicationCounts()
    }
  }, [allExperiences, loadExperienceApplicationCounts])

  // ?†Ï≤≠ ?∞Ïù¥?∞Í? Î°úÎìú?òÎ©¥ ?µÍ≥Ñ ?ÖÎç∞?¥Ìä∏
  useEffect(() => {
    if (applications.length > 0) {
      loadApplicationStats()
    }
  }, [applications, loadApplicationStats])

  if (loading || adminLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="flex items-center space-x-2">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-red-600"></div>
          <span className="text-gray-600">Í∂åÌïú ?ïÏù∏ Ï§?..</span>
        </div>
      </div>
    )
  }

  if (!isAuthenticated) {
    return null
  }

  if (!isAdmin) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <Shield className="h-16 w-16 text-red-500 mx-auto mb-4" />
          <h1 className="text-2xl font-bold text-gray-900 mb-2">?ëÍ∑º Í∂åÌïú ?ÜÏùå</h1>
          <p className="text-gray-600 mb-4">Í¥ÄÎ¶¨Ïûê Í∂åÌïú???ÑÏöî???òÏù¥ÏßÄ?ÖÎãà??</p>
          <p className="text-sm text-gray-500">?ÑÏû¨ ??ï†: {userRole === 'advertiser' ? 'Í¥ëÍ≥†Ï£? : '?ºÎ∞ò?åÏõê'}</p>
          <button 
            onClick={() => router.push('/')}
            className="mt-4 bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors"
          >
            ?àÏúºÎ°??åÏïÑÍ∞ÄÍ∏?          </button>
        </div>
      </div>
    )
  }

  const sidebarItems = [
    { id: 'dashboard', label: '?Ä?úÎ≥¥??, icon: BarChart3 },
    { id: 'users', label: '?¨Ïö©??Í¥ÄÎ¶?, icon: Users },
    { 
      id: 'experiences', 
      label: 'Ï≤¥Ìóò??Í¥ÄÎ¶?, 
      icon: Activity,
      subItems: [
        { id: 'xiaohongshu-experiences', label: '?§Ïò§?çÏäà Ï≤¥Ìóò??, icon: Activity },
        { id: 'instagram-experiences', label: '?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò??, icon: Activity }
      ]
    },
    { 
      id: 'applications', 
      label: '?†Ï≤≠ Í¥ÄÎ¶?, 
      icon: FileText,
      subItems: [
        { id: 'xiaohongshu-applications', label: '?§Ïò§?çÏäà ?†Ï≤≠', icon: FileText },
        { id: 'instagram-applications', label: '?∏Ïä§?ÄÍ∑∏Îû® ?†Ï≤≠', icon: FileText }
      ]
    },
    { 
      id: 'create-card', 
      label: '?†Ï≤≠ Ïπ¥Îìú ÎßåÎì§Í∏?, 
      icon: Plus,
      subItems: [
        { id: 'xiaohongshu-create-card', label: '?§Ïò§?çÏäà Ïπ¥Îìú', icon: Plus },
        { id: 'instagram-create-card', label: '?∏Ïä§?ÄÍ∑∏Îû® Ïπ¥Îìú', icon: Plus }
      ]
    },
    { id: 'edit-cards', label: '?†Ï≤≠ Ïπ¥Îìú ?òÏ†ï', icon: FileText },
    { id: 'excel-export', label: '?ÖÏ≤¥Î≥?Ï≤¥Ìóò???†Ï≤≠Î¶¨Ïä§??, icon: Download }
  ]

  // ?§Ïò§?çÏäà Ï≤¥Ìóò??Í¥ÄÎ¶??åÎçîÎß?  const renderXiaohongshuExperiences = () => {
    const recruitingExperiences = allExperiences.filter(exp => getStatusByDate(exp) === 'recruiting')
    const ongoingExperiences = allExperiences.filter(exp => getStatusByDate(exp) === 'ongoing')
    const completedExperiences = allExperiences.filter(exp => getStatusByDate(exp) === 'completed')

    return (
      <div className="space-y-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">?§Ïò§?çÏäà Ï≤¥Ìóò??Í¥ÄÎ¶?/h2>
          <p className="text-gray-600">?§Ïò§?çÏäà Ï≤¥Ìóò???úÎèô??Í¥ÄÎ¶¨Ìïò?∏Ïöî</p>
        </div>
        
        {/* ?§Ïò§?çÏäà Ï≤¥Ìóò???ÑÌô© ?µÍ≥Ñ */}
        <div className="bg-white rounded-xl shadow-sm p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">?§Ïò§?çÏäà Ï≤¥Ìóò???ÑÌô©</h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-red-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Activity className="h-5 w-5 text-red-600" />
                <span className="text-sm font-medium text-red-800">?ÑÏ≤¥</span>
              </div>
              <p className="text-2xl font-bold text-red-600 mt-2">{experienceStats.total}</p>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Activity className="h-5 w-5 text-green-600" />
                <span className="text-sm font-medium text-green-800">Î™®ÏßëÏ§?/span>
              </div>
              <p className="text-2xl font-bold text-green-600 mt-2">{experienceStats.recruiting}</p>
            </div>
            <div className="bg-yellow-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Calendar className="h-5 w-5 text-yellow-600" />
                <span className="text-sm font-medium text-yellow-800">ÏßÑÌñâÏ§?/span>
              </div>
              <p className="text-2xl font-bold text-yellow-600 mt-2">{experienceStats.ongoing}</p>
            </div>
            <div className="bg-gray-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Shield className="h-5 w-5 text-gray-600" />
                <span className="text-sm font-medium text-gray-800">?ÑÎ£å</span>
              </div>
              <p className="text-2xl font-bold text-gray-600 mt-2">{experienceStats.completed}</p>
            </div>
          </div>
        </div>

        {/* ?§Ïò§?çÏäà Ï≤¥Ìóò??Î™©Î°ù */}
        <div className="bg-white rounded-xl shadow-sm">
          <div className="p-6 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">?§Ïò§?çÏäà Ï≤¥Ìóò??Î™©Î°ù</h3>
              <span className="text-sm text-gray-500">{allExperiences.length}Í∞?/span>
            </div>
          </div>
          <div className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {allExperiences.map((experience) => (
                <div key={experience.id} className="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                  <div className="flex items-start justify-between mb-3">
                    <h4 className="text-lg font-semibold text-gray-900 line-clamp-2">{experience.title}</h4>
                    <span className={`text-xs px-2 py-1 rounded-full ${
                      getStatusByDate(experience) === 'recruiting' ? 'bg-green-100 text-green-800' :
                      getStatusByDate(experience) === 'ongoing' ? 'bg-yellow-100 text-yellow-800' : 'bg-gray-100 text-gray-800'
                    }`}>
                      {getStatusByDate(experience) === 'recruiting' ? 'Î™®ÏßëÏ§? :
                       getStatusByDate(experience) === 'ongoing' ? 'ÏßÑÌñâÏ§? : '?ÑÎ£å'}
                    </span>
                  </div>
                  <p className="text-sm text-gray-600 mb-3 line-clamp-2">{experience.description}</p>
                  <div className="flex items-center justify-between text-sm text-gray-500 mb-3">
                    <span className="font-medium text-red-600">
                      {experienceApplicationCounts[experience.id] !== undefined 
                        ? `${experienceApplicationCounts[experience.id]} / ${experience.maxParticipants}Î™?Î™®Ïßë`
                        : '?†Ï≤≠?∏Ïõê Î°úÎî©Ï§?..'
                      }
                    </span>
                  </div>
                  <div className="flex items-center justify-between text-sm text-gray-500 mb-3">
                    <span>{experience.location}</span>
                    <span>{experience.visitDate}</span>
                  </div>
                  
                  {/* ?ÅÌÉú ?òÏ†ï Î∞???†ú Î≤ÑÌäº */}
                  <div className="flex items-center space-x-2">
                    <select
                      onChange={(e) => handleExperienceStatusUpdate(experience.id, e.target.value as 'recruiting' | 'ongoing' | 'completed')}
                      className="flex-1 px-2 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                      defaultValue={getStatusByDate(experience)}
                    >
                      <option value="recruiting">Î™®ÏßëÏ§?/option>
                      <option value="ongoing">ÏßÑÌñâÏ§?/option>
                      <option value="completed">?ÑÎ£å</option>
                    </select>
                    <button
                      onClick={() => handleExperienceDelete(experience.id, experience.title)}
                      className="px-2 py-1 text-xs bg-red-100 text-red-600 rounded hover:bg-red-200 transition-colors"
                    >
                      ??†ú
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    )
  }

  // ?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò??Í¥ÄÎ¶??åÎçîÎß?  const renderInstagramExperiences = () => {
    return (
      <div className="space-y-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò??Í¥ÄÎ¶?/h2>
          <p className="text-gray-600">?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò???úÎèô??Í¥ÄÎ¶¨Ìïò?∏Ïöî</p>
        </div>
        
        {/* ?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò???ÑÌô© ?µÍ≥Ñ */}
        <div className="bg-white rounded-xl shadow-sm p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò???ÑÌô©</h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-pink-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Activity className="h-5 w-5 text-pink-600" />
                <span className="text-sm font-medium text-pink-800">?ÑÏ≤¥</span>
              </div>
              <p className="text-2xl font-bold text-pink-600 mt-2">{instagramStats.total}</p>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Activity className="h-5 w-5 text-green-600" />
                <span className="text-sm font-medium text-green-800">Î™®ÏßëÏ§?/span>
              </div>
              <p className="text-2xl font-bold text-green-600 mt-2">{instagramStats.recruiting}</p>
            </div>
            <div className="bg-yellow-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Calendar className="h-5 w-5 text-yellow-600" />
                <span className="text-sm font-medium text-yellow-800">ÏßÑÌñâÏ§?/span>
              </div>
              <p className="text-2xl font-bold text-yellow-600 mt-2">{instagramStats.ongoing}</p>
            </div>
            <div className="bg-gray-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Shield className="h-5 w-5 text-gray-600" />
                <span className="text-sm font-medium text-gray-800">?ÑÎ£å</span>
              </div>
              <p className="text-2xl font-bold text-gray-600 mt-2">{instagramStats.completed}</p>
            </div>
          </div>
        </div>

        {/* ?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò??Î™©Î°ù */}
        <div className="bg-white rounded-xl shadow-sm">
          <div className="p-6 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò??Î™©Î°ù</h3>
              <span className="text-sm text-gray-500">0Í∞?/span>
            </div>
          </div>
          <div className="p-6">
            <div className="text-center py-12">
              <Activity className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò?®Ïù¥ ?ÜÏäµ?àÎã§</h3>
              <p className="text-gray-500">?àÎ°ú???∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò?®ÏùÑ ?ùÏÑ±?¥Î≥¥?∏Ïöî.</p>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // ?§Ïò§?çÏäà ?†Ï≤≠ Í¥ÄÎ¶??åÎçîÎß?  const renderXiaohongshuApplications = () => {
    return (
      <div className="space-y-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">?§Ïò§?çÏäà ?†Ï≤≠ Í¥ÄÎ¶?/h2>
          <p className="text-gray-600">?§Ïò§?çÏäà Ï≤¥Ìóò???†Ï≤≠ ?ÑÌô©??Í¥ÄÎ¶¨Ìïò?∏Ïöî</p>
        </div>
        
        {/* ?§Ïò§?çÏäà ?†Ï≤≠ ?ÑÌô© ?µÍ≥Ñ */}
        <div className="bg-white rounded-xl shadow-sm p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">?§Ïò§?çÏäà ?†Ï≤≠ ?ÑÌô©</h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-red-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <FileText className="h-5 w-5 text-red-600" />
                <span className="text-sm font-medium text-red-800">?ÑÏ≤¥ ?†Ï≤≠</span>
              </div>
              <p className="text-2xl font-bold text-red-600 mt-2">{applications.length}</p>
            </div>
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Users className="h-5 w-5 text-blue-600" />
                <span className="text-sm font-medium text-blue-800">?†Í∑ú ?†Ï≤≠</span>
              </div>
              <p className="text-2xl font-bold text-blue-600 mt-2">{applicationStats.todayApplications}</p>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Activity className="h-5 w-5 text-green-600" />
                <span className="text-sm font-medium text-green-800">?¥Î≤à Ï£?/span>
              </div>
              <p className="text-2xl font-bold text-green-600 mt-2">{applicationStats.thisWeekApplications}</p>
            </div>
            <div className="bg-yellow-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Calendar className="h-5 w-5 text-yellow-600" />
                <span className="text-sm font-medium text-yellow-800">?¥Î≤à ??/span>
              </div>
              <p className="text-2xl font-bold text-yellow-600 mt-2">{applicationStats.thisMonthApplications}</p>
            </div>
          </div>
        </div>

        {/* ?§Ïò§?çÏäà ?†Ï≤≠ Î™©Î°ù */}
        <div className="bg-white rounded-xl shadow-sm">
          <div className="p-6 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">?§Ïò§?çÏäà ?†Ï≤≠ Î™©Î°ù</h3>
              <span className="text-sm text-gray-500">{applications.length}Í∞?/span>
            </div>
          </div>
          <div className="p-6">
            {applicationsLoading ? (
              <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-red-600"></div>
                <span className="ml-2 text-gray-600">?†Ï≤≠??Î∂àÎü¨?§Îäî Ï§?..</span>
              </div>
            ) : applications.length === 0 ? (
              <div className="text-center py-8">
                <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-500">?†Ï≤≠???ÜÏäµ?àÎã§</p>
              </div>
            ) : (
              <div className="space-y-4">
                {applications.map((application) => (
                  <div key={application.id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors">
                    <div className="mb-3">
                      <h4 className="font-semibold text-gray-900">{application.name}</h4>
                      <p className="text-sm text-gray-600">{application.email}</p>
                      <p className="text-sm text-gray-500">{application.phone}</p>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <div className="flex items-center space-x-4">
                        <div>
                          <span className="font-medium text-gray-700">Ï≤¥Ìóò?? </span>
                          <span className="text-gray-600">{application.experienceTitle}</span>
                        </div>
                        <div>
                          <span className="font-medium text-gray-700">Î∞©Î¨∏?? </span>
                          <span className="text-gray-600">{application.visitDate}</span>
                        </div>
                      </div>
                      <span className="text-xs text-gray-500">
                        {application.createdAt ? 
                          (application.createdAt instanceof Date ? 
                            application.createdAt.toLocaleDateString('ko-KR') : 
                            typeof application.createdAt === 'object' && 'toDate' in application.createdAt ?
                              application.createdAt.toDate().toLocaleDateString('ko-KR') :
                              new Date(application.createdAt).toLocaleDateString('ko-KR')) : 
                          '?†Ïßú ?ÜÏùå'}
                      </span>
                    </div>
                    <div className="mt-3 flex items-center space-x-2">
                      <button
                        onClick={() => handleApplicationDelete(application.id, application.name)}
                        className="px-3 py-1 text-xs bg-red-100 text-red-600 rounded hover:bg-red-200 transition-colors"
                      >
                        ??†ú
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    )
  }

  // ?∏Ïä§?ÄÍ∑∏Îû® ?†Ï≤≠ Í¥ÄÎ¶??åÎçîÎß?  const renderInstagramApplications = () => {
    return (
      <div className="space-y-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">?∏Ïä§?ÄÍ∑∏Îû® ?†Ï≤≠ Í¥ÄÎ¶?/h2>
          <p className="text-gray-600">?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò???†Ï≤≠ ?ÑÌô©??Í¥ÄÎ¶¨Ìïò?∏Ïöî</p>
        </div>
        
        {/* ?∏Ïä§?ÄÍ∑∏Îû® ?†Ï≤≠ ?ÑÌô© ?µÍ≥Ñ */}
        <div className="bg-white rounded-xl shadow-sm p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">?∏Ïä§?ÄÍ∑∏Îû® ?†Ï≤≠ ?ÑÌô©</h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-pink-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <FileText className="h-5 w-5 text-pink-600" />
                <span className="text-sm font-medium text-pink-800">?ÑÏ≤¥ ?†Ï≤≠</span>
              </div>
              <p className="text-2xl font-bold text-pink-600 mt-2">0</p>
            </div>
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Users className="h-5 w-5 text-blue-600" />
                <span className="text-sm font-medium text-blue-800">?†Í∑ú ?†Ï≤≠</span>
              </div>
              <p className="text-2xl font-bold text-blue-600 mt-2">0</p>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Activity className="h-5 w-5 text-green-600" />
                <span className="text-sm font-medium text-green-800">?¥Î≤à Ï£?/span>
              </div>
              <p className="text-2xl font-bold text-green-600 mt-2">0</p>
            </div>
            <div className="bg-yellow-50 p-4 rounded-lg">
              <div className="flex items-center space-x-2">
                <Calendar className="h-5 w-5 text-yellow-600" />
                <span className="text-sm font-medium text-yellow-800">?¥Î≤à ??/span>
              </div>
              <p className="text-2xl font-bold text-yellow-600 mt-2">0</p>
            </div>
          </div>
        </div>

        {/* ?∏Ïä§?ÄÍ∑∏Îû® ?†Ï≤≠ Î™©Î°ù */}
        <div className="bg-white rounded-xl shadow-sm">
          <div className="p-6 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">?∏Ïä§?ÄÍ∑∏Îû® ?†Ï≤≠ Î™©Î°ù</h3>
              <span className="text-sm text-gray-500">0Í∞?/span>
            </div>
          </div>
          <div className="p-6">
            <div className="text-center py-12">
              <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">?∏Ïä§?ÄÍ∑∏Îû® ?†Ï≤≠???ÜÏäµ?àÎã§</h3>
              <p className="text-gray-500">?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò???†Ï≤≠???§Ïñ¥?§Î©¥ ?¨Í∏∞???úÏãú?©Îãà??</p>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // ?§Ïò§?çÏäà Ïπ¥Îìú ÎßåÎì§Í∏??åÎçîÎß?  const renderXiaohongshuCreateCard = () => {
    return (
      <div className="space-y-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">?§Ïò§?çÏäà ?†Ï≤≠ Ïπ¥Îìú ÎßåÎì§Í∏?/h2>
          <p className="text-gray-600">?§Ïò§?çÏäà Ï≤¥Ìóò???†Ï≤≠ Ïπ¥ÎìúÎ•??ùÏÑ±?òÏÑ∏??/p>
        </div>
        
        {/* Í∏∞Ï°¥ Ïπ¥Îìú ÎßåÎì§Í∏??ºÏùÑ ?¨Í∏∞??Î≥µÏÇ¨ */}
        <div className="bg-white rounded-xl shadow-sm p-6">
          <form onSubmit={handleCardSubmit} className="space-y-6">
            {/* ?úÎèô ?†Ìòï */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">?úÎèô ?†Ìòï</label>
              <select
                value={cardForm.activityType}
                onChange={(e) => setCardForm(prev => ({ ...prev, activityType: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                required
              >
                <option value="">?úÎèô ?†Ìòï???†ÌÉù?òÏÑ∏??/option>
                <option value="restaurant">ÎßõÏßë Ï≤¥Ìóò</option>
                <option value="cafe">Ïπ¥Ìéò Ï≤¥Ìóò</option>
                <option value="shopping">?ºÌïë Ï≤¥Ìóò</option>
                <option value="beauty">Î∑∞Ìã∞ Ï≤¥Ìóò</option>
                <option value="travel">?¨Ìñâ Ï≤¥Ìóò</option>
                <option value="culture">Î¨∏Ìôî Ï≤¥Ìóò</option>
                <option value="other">Í∏∞Ì?</option>
              </select>
            </div>

            {/* ?úÎ™© */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">?úÎ™©</label>
              <input
                type="text"
                value={cardForm.title}
                onChange={(e) => setCardForm(prev => ({ ...prev, title: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                placeholder="Ï≤¥Ìóò???úÎ™©???ÖÎ†•?òÏÑ∏??
                required
              />
            </div>

            {/* ?§Î™Ö */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">?§Î™Ö</label>
              <textarea
                value={cardForm.description}
                onChange={(e) => setCardForm(prev => ({ ...prev, description: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                rows={4}
                placeholder="Ï≤¥Ìóò?®Ïóê ?Ä???êÏÑ∏???§Î™Ö???ÖÎ†•?òÏÑ∏??
                required
              />
            </div>

            {/* ?ÑÏπò */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">?ÑÏπò</label>
              <input
                type="text"
                value={cardForm.location}
                onChange={(e) => setCardForm(prev => ({ ...prev, location: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                placeholder="Ï≤¥Ìóò ?•ÏÜåÎ•??ÖÎ†•?òÏÑ∏??
                required
              />
            </div>

            {/* Î∞©Î¨∏ ?†Ïßú */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Î∞©Î¨∏ ?†Ïßú</label>
              <input
                type="date"
                value={cardForm.visitDate}
                onChange={(e) => setCardForm(prev => ({ ...prev, visitDate: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                required
              />
            </div>

            {/* ÏµúÎ? Ï∞∏Ïó¨????*/}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">ÏµúÎ? Ï∞∏Ïó¨????/label>
              <input
                type="number"
                value={cardForm.maxParticipants}
                onChange={(e) => setCardForm(prev => ({ ...prev, maxParticipants: parseInt(e.target.value) }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                min="1"
                required
              />
            </div>

            {/* ?úÌÉù */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">?úÌÉù</label>
              {cardForm.benefits.map((benefit, index) => (
                <div key={index} className="flex items-center space-x-2 mb-2">
                  <input
                    type="text"
                    value={benefit}
                    onChange={(e) => {
                      const newBenefits = [...cardForm.benefits]
                      newBenefits[index] = e.target.value
                      setCardForm(prev => ({ ...prev, benefits: newBenefits }))
                    }}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                    placeholder="?úÌÉù???ÖÎ†•?òÏÑ∏??
                  />
                  {cardForm.benefits.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeBenefit(index)}
                      className="px-3 py-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors"
                    >
                      ??†ú
                    </button>
                  )}
                </div>
              ))}
              <button
                type="button"
                onClick={addBenefit}
                className="px-4 py-2 bg-green-100 text-green-600 rounded-lg hover:bg-green-200 transition-colors"
              >
                ?úÌÉù Ï∂îÍ?
              </button>
            </div>

            {/* Ï°∞Í±¥ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Ï∞∏Ïó¨ Ï°∞Í±¥</label>
              {cardForm.requirements.map((requirement, index) => (
                <div key={index} className="flex items-center space-x-2 mb-2">
                  <input
                    type="text"
                    value={requirement}
                    onChange={(e) => {
                      const newRequirements = [...cardForm.requirements]
                      newRequirements[index] = e.target.value
                      setCardForm(prev => ({ ...prev, requirements: newRequirements }))
                    }}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                    placeholder="Ï∞∏Ïó¨ Ï°∞Í±¥???ÖÎ†•?òÏÑ∏??
                  />
                  {cardForm.requirements.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeRequirement(index)}
                      className="px-3 py-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors"
                    >
                      ??†ú
                    </button>
                  )}
                </div>
              ))}
              <button
                type="button"
                onClick={addRequirement}
                className="px-4 py-2 bg-green-100 text-green-600 rounded-lg hover:bg-green-200 transition-colors"
              >
                Ï°∞Í±¥ Ï∂îÍ?
              </button>
            </div>

            {/* ?úÏ∂ú Î≤ÑÌäº */}
            <div className="flex justify-end space-x-4">
              <button
                type="button"
                onClick={() => setCardForm({
                  activityType: '',
                  title: '',
                  description: '',
                  location: '',
                  visitDate: '',
                  maxParticipants: 10,
                  benefits: [''],
                  requirements: [''],
                  benefitsZh: [''],
                  requirementsZh: ['']
                })}
                className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Ï¥àÍ∏∞??              </button>
              <button
                type="submit"
                disabled={cardLoading}
                className="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50"
              >
                {cardLoading ? '?ùÏÑ± Ï§?..' : 'Ïπ¥Îìú ?ùÏÑ±'}
              </button>
            </div>
          </form>
        </div>
      </div>
    )
  }

  // ?∏Ïä§?ÄÍ∑∏Îû® Ïπ¥Îìú ÎßåÎì§Í∏??åÎçîÎß?  const renderInstagramCreateCard = () => {
    return (
      <div className="space-y-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">?∏Ïä§?ÄÍ∑∏Îû® ?†Ï≤≠ Ïπ¥Îìú ÎßåÎì§Í∏?/h2>
          <p className="text-gray-600">?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò???†Ï≤≠ Ïπ¥ÎìúÎ•??ùÏÑ±?òÏÑ∏??/p>
        </div>
        
        <div className="bg-white rounded-xl shadow-sm p-6">
          <div className="text-center py-12">
            <Plus className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">?∏Ïä§?ÄÍ∑∏Îû® Ïπ¥Îìú ÎßåÎì§Í∏?/h3>
            <p className="text-gray-500">?∏Ïä§?ÄÍ∑∏Îû® ?ÑÏö© Ïπ¥Îìú ÎßåÎì§Í∏?Í∏∞Îä•?Ä Ï§ÄÎπ?Ï§ëÏûÖ?àÎã§.</p>
          </div>
        </div>
      </div>
    )
  }

  const renderContent = () => {
    // ?úÎ∏å ??ù¥ ?àÏúºÎ©??úÎ∏å ??ùÑ ?∞ÏÑ† Ï≤òÎ¶¨
    if (activeSubTab) {
      switch (activeSubTab) {
        case 'xiaohongshu-experiences':
          return renderXiaohongshuExperiences()
        case 'instagram-experiences':
          return renderInstagramExperiences()
        case 'xiaohongshu-applications':
          return renderXiaohongshuApplications()
        case 'instagram-applications':
          return renderInstagramApplications()
        case 'xiaohongshu-create-card':
          return renderXiaohongshuCreateCard()
        case 'instagram-create-card':
          return renderInstagramCreateCard()
        default:
          break
      }
    }

    switch (activeTab) {
      case 'dashboard':
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">?Ä?úÎ≥¥??/h2>
                <p className="text-gray-600">?úÏä§???ÑÌô©???úÎàà???ïÏù∏?òÏÑ∏??/p>
              </div>
              <div className="flex gap-2">
                <button
                  onClick={async () => {
                    console.log('=== ?∞Ïù¥???ïÏù∏ ?úÏûë ===')
                    try {
                      // Firestore ÏßÅÏ†ë Ï°∞Ìöå
                      const { collection, getDocs } = await import('firebase/firestore')
                      const { db } = await import('@/lib/firebase')
                      
                      // experiences Ïª¨Î†â???ïÏù∏
                      const experiencesRef = collection(db, 'experiences')
                      const experiencesSnapshot = await getDocs(experiencesRef)
                      console.log('experiences Ïª¨Î†â??Î¨∏ÏÑú ??', experiencesSnapshot.docs.length)
                      experiencesSnapshot.docs.forEach((doc, index) => {
                        const data = doc.data()
                        console.log(`Ï≤¥Ìóò??${index + 1}:`, { 
                          id: doc.id, 
                          title: data.title, 
                          applicationsCount: data.applications?.length || 0,
                          applications: data.applications
                        })
                      })
                    } catch (error) {
                      console.error('?∞Ïù¥???ïÏù∏ ?§Î•ò:', error)
                    }
                  }}
                  className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2"
                >
                  ?îç ?∞Ïù¥???ïÏù∏
                </button>
                <button
                  onClick={() => {
                    loadApplications()
                    loadApplicationStats()
                    loadUsers()
                    loadUserStats()
                  }}
                  disabled={applicationsLoading}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center gap-2"
                >
                  <RefreshCw className={`h-4 w-4 ${applicationsLoading ? 'animate-spin' : ''}`} />
                  {applicationsLoading ? 'Î°úÎî© Ï§?..' : '?ÑÏ≤¥ ?àÎ°úÍ≥†Ïπ®'}
                </button>
              </div>
            </div>
            
            {/* ?µÍ≥Ñ Ïπ¥Îìú */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="bg-gradient-to-r from-blue-500 to-blue-600 p-6 rounded-xl text-white">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-blue-100 text-sm font-medium">Ï¥??¨Ïö©??/p>
                    <p className="text-3xl font-bold">{userStats.totalUsers}</p>
                  </div>
                  <Users className="h-8 w-8 text-blue-200" />
                </div>
              </div>
              
              <div className="bg-gradient-to-r from-green-500 to-green-600 p-6 rounded-xl text-white">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-green-100 text-sm font-medium">?§Îäò Í∞Ä??/p>
                    <p className="text-3xl font-bold">{userStats.todayUsers}</p>
                  </div>
                  <UserCheck className="h-8 w-8 text-green-200" />
                </div>
              </div>
              
              <div className="bg-gradient-to-r from-purple-500 to-purple-600 p-6 rounded-xl text-white">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-purple-100 text-sm font-medium">?¥Î≤à Ï£?Í∞Ä??/p>
                    <p className="text-3xl font-bold">{userStats.thisWeekUsers}</p>
                  </div>
                  <TrendingUp className="h-8 w-8 text-purple-200" />
                </div>
              </div>
              
              <div className="bg-gradient-to-r from-orange-500 to-orange-600 p-6 rounded-xl text-white">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-orange-100 text-sm font-medium">Ï¥??†Ï≤≠</p>
                    <p className="text-3xl font-bold">{applicationStats.total}</p>
                  </div>
                  <FileText className="h-8 w-8 text-orange-200" />
                </div>
              </div>
            </div>

            {/* ?†Ï≤≠ ?ÅÌÉúÎ≥??µÍ≥Ñ */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center">
                  <div className="p-3 bg-yellow-100 rounded-lg">
                    <Clock className="h-6 w-6 text-yellow-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">?ÄÍ∏∞Ï§ë</p>
                    <p className="text-2xl font-bold text-gray-900">{applicationStats.pending}</p>
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center">
                  <div className="p-3 bg-green-100 rounded-lg">
                    <CheckCircle className="h-6 w-6 text-green-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">?πÏù∏</p>
                    <p className="text-2xl font-bold text-gray-900">{applicationStats.approved}</p>
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center">
                  <div className="p-3 bg-red-100 rounded-lg">
                    <XCircle className="h-6 w-6 text-red-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Í±∞Ï†à</p>
                    <p className="text-2xl font-bold text-gray-900">{applicationStats.rejected}</p>
                  </div>
                </div>
              </div>
            </div>

            {/* ?§Ïò§?çÏäà Ï≤¥Ìóò???ÑÌô© ?µÍ≥Ñ */}
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">?§Ïò§?çÏäà Ï≤¥Ìóò???ÑÌô©</h3>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="bg-red-50 p-4 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Activity className="h-5 w-5 text-red-600" />
                    <span className="text-sm font-medium text-red-800">?ÑÏ≤¥</span>
                  </div>
                  <p className="text-2xl font-bold text-red-600 mt-2">{experienceStats.total}</p>
                </div>
                <div className="bg-green-50 p-4 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Activity className="h-5 w-5 text-green-600" />
                    <span className="text-sm font-medium text-green-800">Î™®ÏßëÏ§?/span>
                  </div>
                  <p className="text-2xl font-bold text-green-600 mt-2">{experienceStats.recruiting}</p>
                </div>
                <div className="bg-yellow-50 p-4 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Calendar className="h-5 w-5 text-yellow-600" />
                    <span className="text-sm font-medium text-yellow-800">ÏßÑÌñâÏ§?/span>
                  </div>
                  <p className="text-2xl font-bold text-yellow-600 mt-2">{experienceStats.ongoing}</p>
                </div>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Shield className="h-5 w-5 text-gray-600" />
                    <span className="text-sm font-medium text-gray-800">?ÑÎ£å</span>
                  </div>
                  <p className="text-2xl font-bold text-gray-600 mt-2">{experienceStats.completed}</p>
                </div>
              </div>
            </div>

            {/* ?§Ïò§?çÏäà Ï≤¥Ìóò???ïÎ≥¥ */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* ?§Ïò§?çÏäà ÏµúÍ∑º Ï≤¥Ìóò??Î™©Î°ù */}
              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-900">?§Ïò§?çÏäà ÏµúÍ∑º Ï≤¥Ìóò??/h3>
                  <span className="text-sm text-gray-500">{recentExperiences.length}Í∞?/span>
                </div>
                <div className="space-y-3">
                  {recentExperiences.length === 0 ? (
                    <div className="text-center py-4">
                      <Activity className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                      <p className="text-sm text-gray-500">Ï≤¥Ìóò?®Ïù¥ ?ÜÏäµ?àÎã§</p>
                    </div>
                  ) : (
                    recentExperiences.map((experience) => (
                      <div key={experience.id} className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                        <div className={`w-3 h-3 rounded-full ${
                          getStatusByDate(experience) === 'recruiting' ? 'bg-green-500' :
                          getStatusByDate(experience) === 'ongoing' ? 'bg-yellow-500' : 'bg-gray-500'
                        }`}></div>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm font-medium text-gray-900 truncate">{experience.title}</p>
                          <p className="text-xs text-gray-500">
                            {experienceApplicationCounts[experience.id] !== undefined 
                              ? `${experienceApplicationCounts[experience.id]}/${experience.maxParticipants}Î™?Ï∞∏Ïó¨`
                              : 'Î°úÎî©Ï§?..'
                            }
                          </p>
                        </div>
                        <span className={`text-xs px-2 py-1 rounded-full ${
                          getStatusByDate(experience) === 'recruiting' ? 'bg-green-100 text-green-800' :
                          getStatusByDate(experience) === 'ongoing' ? 'bg-yellow-100 text-yellow-800' : 'bg-gray-100 text-gray-800'
                        }`}>
                          {getStatusByDate(experience) === 'recruiting' ? 'Î™®ÏßëÏ§? :
                           getStatusByDate(experience) === 'ongoing' ? 'ÏßÑÌñâÏ§? : '?ÑÎ£å'}
                        </span>
                      </div>
                    ))
                  )}
                </div>
              </div>

              {/* ?§Ïò§?çÏäà ?§Îäò Î∞©Î¨∏?òÎäî Ï≤¥Ìóò??*/}
              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-900">?§Ïò§?çÏäà ?§Îäò Î∞©Î¨∏</h3>
                  <span className="text-sm text-gray-500">{todayExperiences.length}Í∞?/span>
                </div>
                <div className="space-y-3">
                  {todayExperiences.length === 0 ? (
                    <div className="text-center py-4">
                      <Calendar className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                      <p className="text-sm text-gray-500">?§Îäò Î∞©Î¨∏??Ï≤¥Ìóò?®Ïù¥ ?ÜÏäµ?àÎã§</p>
                    </div>
                  ) : (
                    todayExperiences.map((experience) => (
                      <div key={experience.id} className="flex items-center space-x-3 p-3 bg-orange-50 rounded-lg hover:bg-orange-100 transition-colors">
                        <div className="w-3 h-3 bg-orange-500 rounded-full"></div>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm font-medium text-gray-900 truncate">{experience.title}</p>
                          <p className="text-xs text-gray-500">
                            {experienceApplicationCounts[experience.id] !== undefined 
                              ? `${experienceApplicationCounts[experience.id]}/${experience.maxParticipants}Î™?Ï∞∏Ïó¨`
                              : 'Î°úÎî©Ï§?..'
                            }
                          </p>
                          <p className="text-xs text-gray-500">{experience.daysLeft === 0 ? '?§Îäò ÎßàÍ∞ê' : `${experience.daysLeft}???®Ïùå`}</p>
                        </div>
                        <span className="text-xs px-2 py-1 rounded-full bg-orange-100 text-orange-800">
                          Í∏¥Í∏â
                        </span>
                      </div>
                    ))
                  )}
                </div>
              </div>
            </div>

            {/* ?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò???ÑÌô© ?µÍ≥Ñ */}
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò???ÑÌô©</h3>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="bg-pink-50 p-4 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Activity className="h-5 w-5 text-pink-600" />
                    <span className="text-sm font-medium text-pink-800">?ÑÏ≤¥</span>
                  </div>
                  <p className="text-2xl font-bold text-pink-600 mt-2">{instagramStats.total}</p>
                </div>
                <div className="bg-green-50 p-4 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Activity className="h-5 w-5 text-green-600" />
                    <span className="text-sm font-medium text-green-800">Î™®ÏßëÏ§?/span>
                  </div>
                  <p className="text-2xl font-bold text-green-600 mt-2">{instagramStats.recruiting}</p>
                </div>
                <div className="bg-yellow-50 p-4 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Calendar className="h-5 w-5 text-yellow-600" />
                    <span className="text-sm font-medium text-yellow-800">ÏßÑÌñâÏ§?/span>
                  </div>
                  <p className="text-2xl font-bold text-yellow-600 mt-2">{instagramStats.ongoing}</p>
                </div>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Shield className="h-5 w-5 text-gray-600" />
                    <span className="text-sm font-medium text-gray-800">?ÑÎ£å</span>
                  </div>
                  <p className="text-2xl font-bold text-gray-600 mt-2">{instagramStats.completed}</p>
                </div>
              </div>
            </div>

            {/* ?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò???ïÎ≥¥ */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* ?∏Ïä§?ÄÍ∑∏Îû® ÏµúÍ∑º Ï≤¥Ìóò??Î™©Î°ù */}
              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-900">?∏Ïä§?ÄÍ∑∏Îû® ÏµúÍ∑º Ï≤¥Ìóò??/h3>
                  <span className="text-sm text-gray-500">0Í∞?/span>
                </div>
                <div className="space-y-3">
                  <div className="text-center py-4">
                    <Activity className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                    <p className="text-sm text-gray-500">?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò?®Ïù¥ ?ÜÏäµ?àÎã§</p>
                  </div>
                </div>
              </div>

              {/* ?∏Ïä§?ÄÍ∑∏Îû® ?§Îäò Î∞©Î¨∏?òÎäî Ï≤¥Ìóò??*/}
              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-900">?∏Ïä§?ÄÍ∑∏Îû® ?§Îäò Î∞©Î¨∏</h3>
                  <span className="text-sm text-gray-500">0Í∞?/span>
                </div>
                <div className="space-y-3">
                  <div className="text-center py-4">
                    <Calendar className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                    <p className="text-sm text-gray-500">?§Îäò Î∞©Î¨∏???∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò?®Ïù¥ ?ÜÏäµ?àÎã§</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )

      case 'users':
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">?¨Ïö©??Í¥ÄÎ¶?/h2>
                <p className="text-gray-600">?±Î°ù???¨Ïö©?êÎì§??Í¥ÄÎ¶¨Ìïò?∏Ïöî</p>
              </div>
              <button 
                onClick={loadUsers}
                disabled={usersLoading}
                className="flex items-center space-x-2 bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 disabled:opacity-50 transition-colors"
              >
                <RefreshCw className={`h-4 w-4 ${usersLoading ? 'animate-spin' : ''}`} />
                <span>{usersLoading ? 'Î°úÎî© Ï§?..' : '?àÎ°úÍ≥†Ïπ®'}</span>
              </button>
            </div>

            {/* Í¥ÄÎ¶¨Ïûê ?ïÎ≥¥ */}
            <div className="bg-gradient-to-r from-red-500 to-pink-500 rounded-xl p-6 text-white">
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 rounded-full bg-white bg-opacity-20 flex items-center justify-center">
                  <Shield className="h-6 w-6 text-white" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold">Í¥ÄÎ¶¨Ïûê</h3>
                  <p className="text-red-100">{user?.email}</p>
                  <p className="text-sm text-red-200">?úÏä§??Í¥ÄÎ¶¨Ïûê Í∂åÌïú</p>
                </div>
              </div>
            </div>

            {/* Î©îÏãúÏßÄ ?úÏãú */}
            {userMessage && (
              <div className={`p-4 rounded-lg ${
                userMessage.includes('?±Í≥µ') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
              }`}>
                {userMessage}
              </div>
            )}

            {usersLoading ? (
              <div className="flex items-center justify-center py-12">
                <div className="flex items-center space-x-2">
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
                  <span className="text-gray-600">?¨Ïö©??Î™©Î°ù??Î∂àÎü¨?§Îäî Ï§?..</span>
                </div>
              </div>
            ) : users.length === 0 ? (
              <div className="text-center py-12">
                <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-500">?±Î°ù???¨Ïö©?êÍ? ?ÜÏäµ?àÎã§</p>
              </div>
            ) : (
              <div className="bg-white rounded-xl shadow-sm overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900">?¨Ïö©??Î™©Î°ù ({users.length}Î™?</h3>
                </div>
                <div className="divide-y divide-gray-200">
                  {users.map((user) => (
                    <div key={user.id} className="px-6 py-4 hover:bg-gray-50 transition-colors">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-4">
                          <div className="w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center">
                            <span className="text-white font-medium text-sm">
                              {user.displayName?.charAt(0)?.toUpperCase() || 'U'}
                            </span>
                          </div>
                          <div>
                            <p className="font-medium text-gray-900">{user.displayName || '?¥Î¶Ñ ?ÜÏùå'}</p>
                            <p className="text-sm text-gray-500">{user.email}</p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-4">
                          <div className="text-right">
                            <p className="text-sm text-gray-500">
                              {user.createdAt ? 
                                (user.createdAt instanceof Date ? 
                                  user.createdAt.toLocaleDateString('ko-KR') : 
                                  new Date(user.createdAt).toLocaleDateString('ko-KR')) : 
                                '?†Ïßú ?ÜÏùå'}
                            </p>
                            <div className="flex items-center space-x-2 mt-1">
                              <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                                user.role === 'admin' ? 'bg-red-100 text-red-800' :
                                user.role === 'advertiser' ? 'bg-blue-100 text-blue-800' :
                                'bg-green-100 text-green-800'
                              }`}>
                                {user.role === 'admin' ? 'Í¥ÄÎ¶¨Ïûê' :
                                 user.role === 'advertiser' ? 'Í¥ëÍ≥†Ï£? : '?ºÎ∞ò?åÏõê'}
                              </span>
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            {/* ??ï† ?òÏ†ï */}
                            <select
                              value={user.role || 'user'}
                              onChange={(e) => handleRoleUpdate(user.id, e.target.value as UserRole)}
                              className="text-sm border border-gray-300 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-red-500"
                            >
                              <option value="user">?ºÎ∞ò?åÏõê</option>
                              <option value="advertiser">Í¥ëÍ≥†Ï£?/option>
                              <option value="admin">Í¥ÄÎ¶¨Ïûê</option>
                            </select>
                            
                            {/* ??†ú Î≤ÑÌäº */}
                            <button
                              onClick={() => handleUserDelete(user.id, user.displayName || '?¨Ïö©??)}
                              className="text-red-600 hover:text-red-800 p-1 transition-colors"
                              title="?¨Ïö©????†ú"
                            >
                              <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                              </svg>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )

      case 'experiences':
        // Ï≤¥Ìóò??Í¥ÄÎ¶?Î©îÏù∏ ?òÏù¥ÏßÄ - ?úÎ∏å Î©îÎâ¥ ?àÎÇ¥
        return (
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl font-bold text-gray-900 mb-2">Ï≤¥Ìóò??Í¥ÄÎ¶?/h2>
              <p className="text-gray-600">?ºÏ™Ω Î©îÎâ¥?êÏÑú ?§Ïò§?çÏäà ?êÎäî ?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò?®ÏùÑ ?†ÌÉù?òÏÑ∏??/p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* ?§Ïò§?çÏäà Ï≤¥Ìóò??Ïπ¥Îìú */}
              <div className="bg-white rounded-xl shadow-sm p-6 border border-red-200">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                    <Activity className="h-6 w-6 text-red-600" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">?§Ïò§?çÏäà Ï≤¥Ìóò??/h3>
                    <p className="text-sm text-gray-500">?§Ïò§?çÏäà Ï≤¥Ìóò??Í¥ÄÎ¶?/p>
                  </div>
                </div>
                <div className="grid grid-cols-3 gap-4 mb-4">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-red-600">{experienceStats.total}</p>
                    <p className="text-xs text-gray-500">?ÑÏ≤¥</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-green-600">{experienceStats.recruiting}</p>
                    <p className="text-xs text-gray-500">Î™®ÏßëÏ§?/p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-yellow-600">{experienceStats.ongoing}</p>
                    <p className="text-xs text-gray-500">ÏßÑÌñâÏ§?/p>
                  </div>
                </div>
                <button
                  onClick={() => setActiveSubTab('xiaohongshu-experiences')}
                  className="w-full bg-red-50 text-red-700 px-4 py-2 rounded-lg hover:bg-red-100 transition-colors"
                >
                  ?§Ïò§?çÏäà Ï≤¥Ìóò??Í¥ÄÎ¶¨ÌïòÍ∏?                </button>
              </div>

              {/* ?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò??Ïπ¥Îìú */}
              <div className="bg-white rounded-xl shadow-sm p-6 border border-pink-200">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-12 h-12 bg-pink-100 rounded-lg flex items-center justify-center">
                    <Activity className="h-6 w-6 text-pink-600" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò??/h3>
                    <p className="text-sm text-gray-500">?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò??Í¥ÄÎ¶?/p>
                  </div>
                </div>
                <div className="grid grid-cols-3 gap-4 mb-4">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-pink-600">{instagramStats.total}</p>
                    <p className="text-xs text-gray-500">?ÑÏ≤¥</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-green-600">{instagramStats.recruiting}</p>
                    <p className="text-xs text-gray-500">Î™®ÏßëÏ§?/p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-yellow-600">{instagramStats.ongoing}</p>
                    <p className="text-xs text-gray-500">ÏßÑÌñâÏ§?/p>
                  </div>
                </div>
                <button
                  onClick={() => setActiveSubTab('instagram-experiences')}
                  className="w-full bg-pink-50 text-pink-700 px-4 py-2 rounded-lg hover:bg-pink-100 transition-colors"
                >
                  ?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò??Í¥ÄÎ¶¨ÌïòÍ∏?                </button>
              </div>
            </div>
          </div>
        )


      case 'applications':
        // ?†Ï≤≠ Í¥ÄÎ¶?Î©îÏù∏ ?òÏù¥ÏßÄ - ?úÎ∏å Î©îÎâ¥ ?àÎÇ¥
        return (
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl font-bold text-gray-900 mb-2">?†Ï≤≠ Í¥ÄÎ¶?/h2>
              <p className="text-gray-600">?ºÏ™Ω Î©îÎâ¥?êÏÑú ?§Ïò§?çÏäà ?êÎäî ?∏Ïä§?ÄÍ∑∏Îû® ?†Ï≤≠???†ÌÉù?òÏÑ∏??/p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* ?§Ïò§?çÏäà ?†Ï≤≠ Ïπ¥Îìú */}
              <div className="bg-white rounded-xl shadow-sm p-6 border border-red-200">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                    <FileText className="h-6 w-6 text-red-600" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">?§Ïò§?çÏäà ?†Ï≤≠</h3>
                    <p className="text-sm text-gray-500">?§Ïò§?çÏäà Ï≤¥Ìóò???†Ï≤≠ Í¥ÄÎ¶?/p>
                  </div>
                </div>
                <div className="grid grid-cols-3 gap-4 mb-4">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-red-600">{applications.length}</p>
                    <p className="text-xs text-gray-500">?ÑÏ≤¥ ?†Ï≤≠</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-blue-600">{applicationStats.todayApplications}</p>
                    <p className="text-xs text-gray-500">?†Í∑ú ?†Ï≤≠</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-green-600">{applicationStats.thisWeekApplications}</p>
                    <p className="text-xs text-gray-500">?¥Î≤à Ï£?/p>
                  </div>
                </div>
                <button
                  onClick={() => setActiveSubTab('xiaohongshu-applications')}
                  className="w-full bg-red-50 text-red-700 px-4 py-2 rounded-lg hover:bg-red-100 transition-colors"
                >
                  ?§Ïò§?çÏäà ?†Ï≤≠ Í¥ÄÎ¶¨ÌïòÍ∏?                </button>
              </div>

              {/* ?∏Ïä§?ÄÍ∑∏Îû® ?†Ï≤≠ Ïπ¥Îìú */}
              <div className="bg-white rounded-xl shadow-sm p-6 border border-pink-200">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-12 h-12 bg-pink-100 rounded-lg flex items-center justify-center">
                    <FileText className="h-6 w-6 text-pink-600" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">?∏Ïä§?ÄÍ∑∏Îû® ?†Ï≤≠</h3>
                    <p className="text-sm text-gray-500">?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò???†Ï≤≠ Í¥ÄÎ¶?/p>
                  </div>
                </div>
                <div className="grid grid-cols-3 gap-4 mb-4">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-pink-600">0</p>
                    <p className="text-xs text-gray-500">?ÑÏ≤¥ ?†Ï≤≠</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-blue-600">0</p>
                    <p className="text-xs text-gray-500">?†Í∑ú ?†Ï≤≠</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-green-600">0</p>
                    <p className="text-xs text-gray-500">?¥Î≤à Ï£?/p>
                  </div>
                </div>
                <button
                  onClick={() => setActiveSubTab('instagram-applications')}
                  className="w-full bg-pink-50 text-pink-700 px-4 py-2 rounded-lg hover:bg-pink-100 transition-colors"
                >
                  ?∏Ïä§?ÄÍ∑∏Îû® ?†Ï≤≠ Í¥ÄÎ¶¨ÌïòÍ∏?                </button>
              </div>
            </div>
          </div>
        )

      case 'create-card':
        // ?†Ï≤≠ Ïπ¥Îìú ÎßåÎì§Í∏?Î©îÏù∏ ?òÏù¥ÏßÄ - ?úÎ∏å Î©îÎâ¥ ?àÎÇ¥
        return (
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl font-bold text-gray-900 mb-2">?†Ï≤≠ Ïπ¥Îìú ÎßåÎì§Í∏?/h2>
              <p className="text-gray-600">?ºÏ™Ω Î©îÎâ¥?êÏÑú ?§Ïò§?çÏäà ?êÎäî ?∏Ïä§?ÄÍ∑∏Îû® Ïπ¥ÎìúÎ•??†ÌÉù?òÏÑ∏??/p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* ?§Ïò§?çÏäà Ïπ¥Îìú ÎßåÎì§Í∏?Ïπ¥Îìú */}
              <div className="bg-white rounded-xl shadow-sm p-6 border border-red-200">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                    <Plus className="h-6 w-6 text-red-600" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">?§Ïò§?çÏäà Ïπ¥Îìú</h3>
                    <p className="text-sm text-gray-500">?§Ïò§?çÏäà Ï≤¥Ìóò??Ïπ¥Îìú ?ùÏÑ±</p>
                  </div>
                </div>
                <p className="text-sm text-gray-600 mb-4">
                  ?§Ïò§?çÏäà Ï≤¥Ìóò?®ÏùÑ ?ÑÌïú ?†Ï≤≠ Ïπ¥ÎìúÎ•??ùÏÑ±?????àÏäµ?àÎã§. 
                  ?úÎèô ?†Ìòï, ?úÎ™©, ?§Î™Ö, ?ÑÏπò, Î∞©Î¨∏ ?†Ïßú ?±ÏùÑ ?§Ï†ï?????àÏäµ?àÎã§.
                </p>
                <button
                  onClick={() => setActiveSubTab('xiaohongshu-create-card')}
                  className="w-full bg-red-50 text-red-700 px-4 py-2 rounded-lg hover:bg-red-100 transition-colors"
                >
                  ?§Ïò§?çÏäà Ïπ¥Îìú ÎßåÎì§Í∏?                </button>
              </div>

              {/* ?∏Ïä§?ÄÍ∑∏Îû® Ïπ¥Îìú ÎßåÎì§Í∏?Ïπ¥Îìú */}
              <div className="bg-white rounded-xl shadow-sm p-6 border border-pink-200">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-12 h-12 bg-pink-100 rounded-lg flex items-center justify-center">
                    <Plus className="h-6 w-6 text-pink-600" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">?∏Ïä§?ÄÍ∑∏Îû® Ïπ¥Îìú</h3>
                    <p className="text-sm text-gray-500">?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò??Ïπ¥Îìú ?ùÏÑ±</p>
                  </div>
                </div>
                <p className="text-sm text-gray-600 mb-4">
                  ?∏Ïä§?ÄÍ∑∏Îû® Ï≤¥Ìóò?®ÏùÑ ?ÑÌïú ?†Ï≤≠ Ïπ¥ÎìúÎ•??ùÏÑ±?????àÏäµ?àÎã§. 
                  ?ÑÏû¨ Ï§ÄÎπ?Ï§ëÏù∏ Í∏∞Îä•?ÖÎãà??
                </p>
                <button
                  onClick={() => setActiveSubTab('instagram-create-card')}
                  className="w-full bg-pink-50 text-pink-700 px-4 py-2 rounded-lg hover:bg-pink-100 transition-colors"
                >
                  ?∏Ïä§?ÄÍ∑∏Îû® Ïπ¥Îìú ÎßåÎì§Í∏?                </button>
              </div>
            </div>
          </div>
        )
                          <button
                            type="button"
                            onClick={() => removeRequirementZh(index)}
                            className="px-3 py-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors"
                          >
                            ?†Èô§
                          </button>
                        )}
                      </div>
                    ))}
                    <button
                      type="button"
                      onClick={addRequirementZh}
                      className="w-full px-4 py-2 bg-green-100 text-green-600 rounded-lg hover:bg-green-200 transition-colors border-2 border-dashed border-green-300"
                    >
                      + Ê∑ªÂä†?°‰ª∂
                    </button>
                  </div>
                </div>
                
                {cardMessage && (
                  <div className={`p-3 rounded-lg ${
                    cardMessage.includes('?±Í≥µ') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                  }`}>
                    {cardMessage}
                  </div>
                )}
                
                <div className="flex items-center space-x-4">
                  <button
                    type="submit"
                    disabled={cardSubmitting}
                    className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
                  >
                            <span>?ìÖ {experience.date}</span>
                            <span>?ë• {experience.maxParticipants}Î™?/span>
                            <span>?ìç {experience.location}</span>
                          </div>
                        </div>
                        <div className="flex gap-2 ml-4">
                          <button
                            onClick={() => handleEditCard(experience)}
                            className="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600 transition-colors"
                          >
                            ?òÏ†ï
                          </button>
                          <button
                            onClick={() => handleDeleteCard(experience.id)}
                            className="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600 transition-colors"
                          >
                            ??†ú
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )

      case 'excel-export':
        return (
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl font-bold text-gray-900 mb-2">?ÖÏ≤¥Î≥?Ï≤¥Ìóò???†Ï≤≠Î¶¨Ïä§??/h2>
              <p className="text-gray-600">Ï≤¥Ìóò???†Ï≤≠ ?∞Ïù¥?∞Î? ?ëÏ? ?åÏùºÎ°??§Ïö¥Î°úÎìú?????àÏäµ?àÎã§</p>
            </div>
            
            <div className="bg-white rounded-xl shadow-sm p-6">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-semibold text-gray-900">?†Ï≤≠ ?∞Ïù¥??Í¥ÄÎ¶?/h3>
                <div className="flex gap-3">
                  <button
                    onClick={loadExcelData}
                    disabled={excelLoading}
                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center gap-2"
                  >
                    <RefreshCw className={`h-4 w-4 ${excelLoading ? 'animate-spin' : ''}`} />
                    {excelLoading ? 'Î°úÎî© Ï§?..' : '?∞Ïù¥???àÎ°úÍ≥†Ïπ®'}
                  </button>
                  <button
                    onClick={handleExcelDownload}
                    disabled={excelData.length === 0}
                    className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 flex items-center gap-2"
                  >
                    <Download className="h-4 w-4" />
                    ?ëÏ? ?§Ïö¥Î°úÎìú
                  </button>
                </div>
              </div>

              {excelMessage && (
                <div className={`mb-4 p-3 rounded-lg ${
                  excelMessage.includes('?±Í≥µ') ? 'bg-green-50 text-green-700' : 
                  excelMessage.includes('?§Ìå®') ? 'bg-red-50 text-red-700' : 
                  'bg-blue-50 text-blue-700'
                }`}>
                  {excelMessage}
                </div>
              )}

              {excelData.length > 0 ? (
                <div className="space-y-4">
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h4 className="font-semibold text-gray-900 mb-2">?∞Ïù¥??ÎØ∏Î¶¨Î≥¥Í∏∞</h4>
                    <p className="text-sm text-gray-600 mb-3">Ï¥?{excelData.length}Í∞úÏùò ?†Ï≤≠ ?∞Ïù¥?∞Í? ?àÏäµ?àÎã§.</p>
                    
                    <div className="overflow-x-auto">
                      <table className="min-w-full text-sm">
                        <thead>
                          <tr className="border-b border-gray-200">
                            <th className="text-left py-2 px-3 font-semibold text-gray-700">?†Ï≤≠??/th>
                            <th className="text-left py-2 px-3 font-semibold text-gray-700">Ï≤¥Ìóò??/th>
                            <th className="text-left py-2 px-3 font-semibold text-gray-700">?ÅÌÉú</th>
                            <th className="text-left py-2 px-3 font-semibold text-gray-700">?†Ï≤≠??/th>
                          </tr>
                        </thead>
                        <tbody>
                          {excelData.slice(0, 5).map((row, index) => (
                            <tr key={index} className="border-b border-gray-100">
                              <td className="py-2 px-3">
                                <div>
                                  <div className="font-medium text-gray-900">{row['?†Ï≤≠???¥Î¶Ñ']}</div>
                                  <div className="text-gray-500 text-xs">{row['?†Ï≤≠???¥Î©î??]}</div>
                                </div>
                              </td>
                              <td className="py-2 px-3">
                                <div className="font-medium text-gray-900">{row['Ï≤¥Ìóò???úÎ™©']}</div>
                                <div className="text-gray-500 text-xs">{row['Ï≤¥Ìóò??Ïπ¥ÌÖåÍ≥†Î¶¨']}</div>
                              </td>
                              <td className="py-2 px-3">
                                <span className={`px-2 py-1 text-xs rounded-full ${
                                  row['?†Ï≤≠ ?ÅÌÉú'] === '?πÏù∏' ? 'bg-green-100 text-green-800' :
                                  row['?†Ï≤≠ ?ÅÌÉú'] === 'Í±∞Ï†à' ? 'bg-red-100 text-red-800' :
                                  'bg-yellow-100 text-yellow-800'
                                }`}>
                                  {row['?†Ï≤≠ ?ÅÌÉú']}
                                </span>
                              </td>
                              <td className="py-2 px-3 text-gray-600">{row['?†Ï≤≠ ?ºÏãú']}</td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                    
                    {excelData.length > 5 && (
                      <p className="text-xs text-gray-500 mt-2">
                        ... ??{excelData.length - 5}Í∞???(?ëÏ? ?åÏùº?êÏÑú ?ÑÏ≤¥ ?∞Ïù¥???ïÏù∏ Í∞Ä??
                      </p>
                    )}
                  </div>
                </div>
              ) : (
                <div className="text-center py-8">
                  <List className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-500 mb-4">?ÑÏßÅ ?∞Ïù¥?∞Í? Î°úÎìú?òÏ? ?äÏïò?µÎãà??</p>
                  <p className="text-sm text-gray-400">?ÑÏùò &quot;?∞Ïù¥???àÎ°úÍ≥†Ïπ®&quot; Î≤ÑÌäº???¥Î¶≠?òÏó¨ ?†Ï≤≠ ?∞Ïù¥?∞Î? Î∂àÎü¨?§ÏÑ∏??</p>
                </div>
              )}
            </div>
          </div>
        )

      default:
        return null
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* ?¨Ïù¥?úÎ∞î */}
      <div className="w-64 bg-white shadow-lg flex flex-col h-screen sticky top-0 min-h-full">
        {/* ?ÅÎã® Î°úÍ≥† ?ÅÏó≠ */}
        <div className="p-6">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-gradient-to-r from-red-500 to-pink-500 rounded-lg flex items-center justify-center">
              <Shield className="h-5 w-5 text-white" />
            </div>
            <div>
              <h1 className="text-xl font-bold text-gray-900">Í¥ÄÎ¶¨Ïûê</h1>
              <p className="text-sm text-gray-500">{t('site.title')}</p>
            </div>
          </div>
        </div>
        
        {/* ?§ÎπÑÍ≤åÏù¥??Î©îÎâ¥ */}
        <nav className="flex-1 px-0 overflow-y-auto">
          {sidebarItems.map((item) => {
            const Icon = item.icon
            const hasSubItems = item.subItems && item.subItems.length > 0
            const isExpanded = activeTab === item.id && hasSubItems
            
            return (
              <div key={item.id}>
                <button
                  onClick={() => {
                    if (hasSubItems) {
                      setActiveTab(item.id)
                      if (activeSubTab === '') {
                        setActiveSubTab(item.subItems[0].id)
                      }
                    } else {
                      setActiveTab(item.id)
                      setActiveSubTab('')
                    }
                  }}
                  className={`w-full flex items-center space-x-3 px-6 py-3 text-left transition-colors ${
                    activeTab === item.id
                      ? 'bg-red-50 text-red-700 border-r-2 border-red-600'
                      : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                  }`}
                >
                  <Icon className="h-5 w-5" />
                  <span className="font-medium">{item.label}</span>
                  {hasSubItems && (
                    <svg 
                      className={`h-4 w-4 ml-auto transition-transform ${isExpanded ? 'rotate-90' : ''}`}
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  )}
                </button>
                
                {/* ?úÎ∏å Î©îÎâ¥ */}
                {hasSubItems && isExpanded && (
                  <div className="bg-gray-50">
                    {item.subItems.map((subItem) => {
                      const SubIcon = subItem.icon
                      return (
                        <button
                          key={subItem.id}
                          onClick={() => setActiveSubTab(subItem.id)}
                          className={`w-full flex items-center space-x-3 px-12 py-2 text-left transition-colors ${
                            activeSubTab === subItem.id
                              ? 'bg-red-100 text-red-700'
                              : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900'
                          }`}
                        >
                          <SubIcon className="h-4 w-4" />
                          <span className="text-sm">{subItem.label}</span>
                        </button>
                      )
                    })}
                  </div>
                )}
              </div>
            )
          })}
        </nav>
        
        {/* ?òÎã® Ï≤¥Ìóò???åÏïÑÍ∞ÄÍ∏?Î≤ÑÌäº */}
        <div className="p-6 border-t border-gray-200">
          <button
            onClick={() => router.push('/')}
            className="w-full flex items-center justify-center space-x-2 bg-gradient-to-r from-red-500 to-pink-500 text-white px-4 py-3 rounded-lg hover:from-red-600 hover:to-pink-600 transition-all duration-200 shadow-md hover:shadow-lg"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
            </svg>
            <span className="font-medium">Ï≤¥Ìóò???åÏïÑÍ∞ÄÍ∏?/span>
          </button>
        </div>
      </div>

      {/* Î©îÏù∏ ÏΩòÌÖêÏ∏?*/}
      <div className="flex-1 p-8">
        {renderContent()}
      </div>
    </div>
  )
}
